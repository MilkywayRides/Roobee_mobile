# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _UserRoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.UserRole']]


class _UserRoleListFilterHasInput(TypedDict):
    has: 'enums.UserRole'


class _UserRoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.UserRole']


class _UserRoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.UserRole']


class _UserRoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


UserRoleListFilter = Union[
    _UserRoleListFilterHasInput,
    _UserRoleListFilterEqualsInput,
    _UserRoleListFilterHasSomeInput,
    _UserRoleListFilterIsEmptyInput,
    _UserRoleListFilterHasEveryInput,
]


class _UserRoleListUpdateSet(TypedDict):
    set: List['enums.UserRole']


class _UserRoleListUpdatePush(TypedDict):
    push: List['enums.UserRole']


UserRoleListUpdate = Union[
    List['enums.UserRole'],
    _UserRoleListUpdateSet,
    _UserRoleListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    password: Optional[_str]
    role: 'enums.UserRole'
    resetToken: Optional[_str]
    resetTokenExpiry: Optional[datetime.datetime]
    lastLogin: Optional[datetime.datetime]
    accounts: 'AccountCreateManyNestedWithoutRelationsInput'
    sessions: 'SessionCreateManyNestedWithoutRelationsInput'
    passwordResetTokens: 'PasswordResetTokenCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    coin: _int
    projects: 'ProjectCreateManyNestedWithoutRelationsInput'
    uploadedFiles: 'ProjectFileCreateManyNestedWithoutRelationsInput'
    posts: 'PostCreateManyNestedWithoutRelationsInput'
    likes: 'LikeCreateManyNestedWithoutRelationsInput'
    following: 'FollowCreateManyNestedWithoutRelationsInput'
    followers: 'FollowCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    password: Optional[_str]
    role: 'enums.UserRole'
    resetToken: Optional[_str]
    resetTokenExpiry: Optional[datetime.datetime]
    lastLogin: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    coin: _int


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

_UserWhereUnique_resetToken_Input = TypedDict(
    '_UserWhereUnique_resetToken_Input',
    {
        'resetToken': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
    '_UserWhereUnique_resetToken_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    password: Optional[_str]
    role: 'enums.UserRole'
    resetToken: Optional[_str]
    resetTokenExpiry: Optional[datetime.datetime]
    lastLogin: Optional[datetime.datetime]
    accounts: 'AccountUpdateManyWithoutRelationsInput'
    sessions: 'SessionUpdateManyWithoutRelationsInput'
    passwordResetTokens: 'PasswordResetTokenUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    coin: Union[AtomicIntInput, _int]
    projects: 'ProjectUpdateManyWithoutRelationsInput'
    uploadedFiles: 'ProjectFileUpdateManyWithoutRelationsInput'
    posts: 'PostUpdateManyWithoutRelationsInput'
    likes: 'LikeUpdateManyWithoutRelationsInput'
    following: 'FollowUpdateManyWithoutRelationsInput'
    followers: 'FollowUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: Optional[_str]
    email: Optional[_str]
    emailVerified: Optional[datetime.datetime]
    image: Optional[_str]
    password: Optional[_str]
    role: 'enums.UserRole'
    resetToken: Optional[_str]
    resetTokenExpiry: Optional[datetime.datetime]
    lastLogin: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    coin: Union[AtomicIntInput, _int]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_emailVerified_OrderByInput = TypedDict(
    '_User_emailVerified_OrderByInput',
    {
        'emailVerified': 'SortOrder',
    },
    total=True
)

_User_image_OrderByInput = TypedDict(
    '_User_image_OrderByInput',
    {
        'image': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_resetToken_OrderByInput = TypedDict(
    '_User_resetToken_OrderByInput',
    {
        'resetToken': 'SortOrder',
    },
    total=True
)

_User_resetTokenExpiry_OrderByInput = TypedDict(
    '_User_resetTokenExpiry_OrderByInput',
    {
        'resetTokenExpiry': 'SortOrder',
    },
    total=True
)

_User_lastLogin_OrderByInput = TypedDict(
    '_User_lastLogin_OrderByInput',
    {
        'lastLogin': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_coin_OrderByInput = TypedDict(
    '_User_coin_OrderByInput',
    {
        'coin': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_name_OrderByInput',
    '_User_email_OrderByInput',
    '_User_emailVerified_OrderByInput',
    '_User_image_OrderByInput',
    '_User_password_OrderByInput',
    '_User_role_OrderByInput',
    '_User_resetToken_OrderByInput',
    '_User_resetTokenExpiry_OrderByInput',
    '_User_lastLogin_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_coin_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    accounts: Union[bool, 'FindManyAccountArgsFromUser']
    sessions: Union[bool, 'FindManySessionArgsFromUser']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromUser']
    projects: Union[bool, 'FindManyProjectArgsFromUser']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromUser']
    posts: Union[bool, 'FindManyPostArgsFromUser']
    likes: Union[bool, 'FindManyLikeArgsFromUser']
    following: Union[bool, 'FindManyFollowArgsFromUser']
    followers: Union[bool, 'FindManyFollowArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive1']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromUserRecursive1']
    projects: Union[bool, 'FindManyProjectArgsFromUserRecursive1']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromUserRecursive1']
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromUserRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive2']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromUserRecursive2']
    projects: Union[bool, 'FindManyProjectArgsFromUserRecursive2']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromUserRecursive2']
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromUserRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive3']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromUserRecursive3']
    projects: Union[bool, 'FindManyProjectArgsFromUserRecursive3']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromUserRecursive3']
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromUserRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    accounts: Union[bool, 'FindManyAccountArgsFromUserRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive4']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromUserRecursive4']
    projects: Union[bool, 'FindManyProjectArgsFromUserRecursive4']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromUserRecursive4']
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromUserRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class AccountIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class AccountIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class AccountIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class AccountIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class AccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyAccountArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class SessionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class SessionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class SessionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class SessionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class VerificationTokenIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class VerificationTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyVerificationTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class PasswordResetTokenIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class PasswordResetTokenIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class PasswordResetTokenIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class PasswordResetTokenIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class PasswordResetTokenIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PasswordResetTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class PasswordResetTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class PasswordResetTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class PasswordResetTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class PasswordResetTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPasswordResetTokenArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class FindManyPasswordResetTokenArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class FindManyPasswordResetTokenArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class FindManyPasswordResetTokenArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class FindManyPasswordResetTokenArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    
    

class ProjectIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    owner: Union[bool, 'UserArgsFromUserRecursive1']
    files: Union[bool, 'FindManyProjectFileArgsFromUserRecursive1']


class ProjectIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    owner: Union[bool, 'UserArgsFromUserRecursive2']
    files: Union[bool, 'FindManyProjectFileArgsFromUserRecursive2']


class ProjectIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    owner: Union[bool, 'UserArgsFromUserRecursive3']
    files: Union[bool, 'FindManyProjectFileArgsFromUserRecursive3']


class ProjectIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    owner: Union[bool, 'UserArgsFromUserRecursive4']
    files: Union[bool, 'FindManyProjectFileArgsFromUserRecursive4']


class ProjectIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProjectArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProjectArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class ProjectFileIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    project: Union[bool, 'ProjectArgsFromUserRecursive1']
    uploadedBy: Union[bool, 'UserArgsFromUserRecursive1']


class ProjectFileIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    project: Union[bool, 'ProjectArgsFromUserRecursive2']
    uploadedBy: Union[bool, 'UserArgsFromUserRecursive2']


class ProjectFileIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    project: Union[bool, 'ProjectArgsFromUserRecursive3']
    uploadedBy: Union[bool, 'UserArgsFromUserRecursive3']


class ProjectFileIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    project: Union[bool, 'ProjectArgsFromUserRecursive4']
    uploadedBy: Union[bool, 'UserArgsFromUserRecursive4']


class ProjectFileIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProjectFileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class ProjectFileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class ProjectFileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class ProjectFileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class ProjectFileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProjectFileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class FindManyProjectFileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class FindManyProjectFileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class FindManyProjectFileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class FindManyProjectFileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    
    

class PostIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive1']


class PostIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive2']


class PostIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive3']


class PostIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromUserRecursive4']


class PostIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class LikeIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']
    post: Union[bool, 'PostArgsFromUserRecursive1']


class LikeIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']
    post: Union[bool, 'PostArgsFromUserRecursive2']


class LikeIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']
    post: Union[bool, 'PostArgsFromUserRecursive3']


class LikeIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']
    post: Union[bool, 'PostArgsFromUserRecursive4']


class LikeIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class LikeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyLikeArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class FollowIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    follower: Union[bool, 'UserArgsFromUserRecursive1']
    following: Union[bool, 'UserArgsFromUserRecursive1']


class FollowIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    follower: Union[bool, 'UserArgsFromUserRecursive2']
    following: Union[bool, 'UserArgsFromUserRecursive2']


class FollowIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    follower: Union[bool, 'UserArgsFromUserRecursive3']
    following: Union[bool, 'UserArgsFromUserRecursive3']


class FollowIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    follower: Union[bool, 'UserArgsFromUserRecursive4']
    following: Union[bool, 'UserArgsFromUserRecursive4']


class FollowIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class FollowArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyFollowArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    
    

class SecurityAuditLogIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class SecurityAuditLogIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class SecurityAuditLogIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class SecurityAuditLogIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class SecurityAuditLogIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SecurityAuditLogArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class SecurityAuditLogArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class SecurityAuditLogArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class SecurityAuditLogArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class SecurityAuditLogArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySecurityAuditLogArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class FindManySecurityAuditLogArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class FindManySecurityAuditLogArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class FindManySecurityAuditLogArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class FindManySecurityAuditLogArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    role: 'enums.UserRole'
    resetToken: Union[None, _str, 'types.StringFilter']
    resetTokenExpiry: Union[None, datetime.datetime, 'types.DateTimeFilter']
    lastLogin: Union[None, datetime.datetime, 'types.DateTimeFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    passwordResetTokens: 'PasswordResetTokenListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    coin: Union[_int, 'types.IntFilter']
    projects: 'ProjectListRelationFilter'
    uploadedFiles: 'ProjectFileListRelationFilter'
    posts: 'PostListRelationFilter'
    likes: 'LikeListRelationFilter'
    following: 'FollowListRelationFilter'
    followers: 'FollowListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    role: 'enums.UserRole'
    resetToken: Union[None, _str, 'types.StringFilter']
    resetTokenExpiry: Union[None, datetime.datetime, 'types.DateTimeFilter']
    lastLogin: Union[None, datetime.datetime, 'types.DateTimeFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    passwordResetTokens: 'PasswordResetTokenListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    coin: Union[_int, 'types.IntFilter']
    projects: 'ProjectListRelationFilter'
    uploadedFiles: 'ProjectFileListRelationFilter'
    posts: 'PostListRelationFilter'
    likes: 'LikeListRelationFilter'
    following: 'FollowListRelationFilter'
    followers: 'FollowListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    role: 'enums.UserRole'
    resetToken: Union[None, _str, 'types.StringFilter']
    resetTokenExpiry: Union[None, datetime.datetime, 'types.DateTimeFilter']
    lastLogin: Union[None, datetime.datetime, 'types.DateTimeFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    passwordResetTokens: 'PasswordResetTokenListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    coin: Union[_int, 'types.IntFilter']
    projects: 'ProjectListRelationFilter'
    uploadedFiles: 'ProjectFileListRelationFilter'
    posts: 'PostListRelationFilter'
    likes: 'LikeListRelationFilter'
    following: 'FollowListRelationFilter'
    followers: 'FollowListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    role: 'enums.UserRole'
    resetToken: Union[None, _str, 'types.StringFilter']
    resetTokenExpiry: Union[None, datetime.datetime, 'types.DateTimeFilter']
    lastLogin: Union[None, datetime.datetime, 'types.DateTimeFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    passwordResetTokens: 'PasswordResetTokenListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    coin: Union[_int, 'types.IntFilter']
    projects: 'ProjectListRelationFilter'
    uploadedFiles: 'ProjectFileListRelationFilter'
    posts: 'PostListRelationFilter'
    likes: 'LikeListRelationFilter'
    following: 'FollowListRelationFilter'
    followers: 'FollowListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    emailVerified: Union[None, datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    password: Union[None, _str, 'types.StringFilter']
    role: 'enums.UserRole'
    resetToken: Union[None, _str, 'types.StringFilter']
    resetTokenExpiry: Union[None, datetime.datetime, 'types.DateTimeFilter']
    lastLogin: Union[None, datetime.datetime, 'types.DateTimeFilter']
    accounts: 'AccountListRelationFilter'
    sessions: 'SessionListRelationFilter'
    passwordResetTokens: 'PasswordResetTokenListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    coin: Union[_int, 'types.IntFilter']
    projects: 'ProjectListRelationFilter'
    uploadedFiles: 'ProjectFileListRelationFilter'
    posts: 'PostListRelationFilter'
    likes: 'LikeListRelationFilter'
    following: 'FollowListRelationFilter'
    followers: 'FollowListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    resetToken: Union[_str, 'types.StringWithAggregatesFilter']
    resetTokenExpiry: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastLogin: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    coin: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    resetToken: Union[_str, 'types.StringWithAggregatesFilter']
    resetTokenExpiry: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastLogin: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    coin: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    resetToken: Union[_str, 'types.StringWithAggregatesFilter']
    resetTokenExpiry: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastLogin: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    coin: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    resetToken: Union[_str, 'types.StringWithAggregatesFilter']
    resetTokenExpiry: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastLogin: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    coin: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    emailVerified: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    resetToken: Union[_str, 'types.StringWithAggregatesFilter']
    resetTokenExpiry: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastLogin: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    coin: Union[_int, 'types.IntWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    email: _str
    emailVerified: datetime.datetime
    image: _str
    password: _str
    role: 'enums.UserRole'
    resetToken: _str
    resetTokenExpiry: datetime.datetime
    lastLogin: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    coin: _int
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    coin: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    coin: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    name: _str
    email: _str
    emailVerified: datetime.datetime
    image: _str
    password: _str
    role: 'enums.UserRole'
    resetToken: _str
    resetTokenExpiry: datetime.datetime
    lastLogin: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    coin: _int


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    name: bool
    email: bool
    emailVerified: bool
    image: bool
    password: bool
    role: bool
    resetToken: bool
    resetTokenExpiry: bool
    lastLogin: bool
    createdAt: bool
    updatedAt: bool
    coin: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    name: bool
    email: bool
    emailVerified: bool
    image: bool
    password: bool
    role: bool
    resetToken: bool
    resetTokenExpiry: bool
    lastLogin: bool
    createdAt: bool
    updatedAt: bool
    coin: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    coin: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'email': bool,
        'emailVerified': bool,
        'image': bool,
        'password': bool,
        'role': bool,
        'resetToken': bool,
        'resetTokenExpiry': bool,
        'lastLogin': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'coin': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'email': int,
        'emailVerified': int,
        'image': int,
        'password': int,
        'role': int,
        'resetToken': int,
        'resetTokenExpiry': int,
        'lastLogin': int,
        'createdAt': int,
        'updatedAt': int,
        'coin': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'role',
    'resetToken',
    'resetTokenExpiry',
    'lastLogin',
    'accounts',
    'sessions',
    'passwordResetTokens',
    'createdAt',
    'updatedAt',
    'coin',
    'projects',
    'uploadedFiles',
    'posts',
    'likes',
    'following',
    'followers',
]
UserScalarFieldKeys = Literal[
    'id',
    'name',
    'email',
    'emailVerified',
    'image',
    'password',
    'role',
    'resetToken',
    'resetTokenExpiry',
    'lastLogin',
    'createdAt',
    'updatedAt',
    'coin',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'accounts',
        'sessions',
        'passwordResetTokens',
        'projects',
        'uploadedFiles',
        'posts',
        'likes',
        'following',
        'followers',
    ]

# Account types

class AccountOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Account create method"""
    id: _str
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    user: 'UserCreateNestedWithoutRelationsInput'


class AccountCreateInput(AccountOptionalCreateInput):
    """Required arguments to the Account create method"""
    type: _str
    provider: _str
    providerAccountId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class AccountOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Account create method, without relations"""
    id: _str
    userId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[_int]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]


class AccountCreateWithoutRelationsInput(AccountOptionalCreateWithoutRelationsInput):
    """Required arguments to the Account create method, without relations"""
    type: _str
    provider: _str
    providerAccountId: _str

class AccountConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'AccountCreateWithoutRelationsInput'
    where: 'AccountWhereUniqueInput'

class AccountCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'
    connect_or_create: 'AccountConnectOrCreateWithoutRelationsInput'


class AccountCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['AccountCreateWithoutRelationsInput', List['AccountCreateWithoutRelationsInput']]
    connect: Union['AccountWhereUniqueInput', List['AccountWhereUniqueInput']]
    connect_or_create: Union['AccountConnectOrCreateWithoutRelationsInput', List['AccountConnectOrCreateWithoutRelationsInput']]

_AccountWhereUnique_id_Input = TypedDict(
    '_AccountWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKeyInner = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKeyInner',
    {
        'provider': '_str',
        'providerAccountId': '_str',
    },
    total=True
)

_AccountCompoundprovider_providerAccountIdKey = TypedDict(
    '_AccountCompoundprovider_providerAccountIdKey',
    {
        'provider_providerAccountId': '_AccountCompoundprovider_providerAccountIdKeyInner',
    },
    total=True
)

AccountWhereUniqueInput = Union[
    '_AccountWhereUnique_id_Input',
    '_AccountCompoundprovider_providerAccountIdKey',
]


class AccountUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]
    user: 'UserUpdateOneWithoutRelationsInput'


class AccountUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: Optional[_str]
    access_token: Optional[_str]
    expires_at: Optional[Union[AtomicIntInput, _int]]
    token_type: Optional[_str]
    scope: Optional[_str]
    id_token: Optional[_str]
    session_state: Optional[_str]


class AccountUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['AccountCreateWithoutRelationsInput']
    connect: List['AccountWhereUniqueInput']
    connect_or_create: List['AccountConnectOrCreateWithoutRelationsInput']
    set: List['AccountWhereUniqueInput']
    disconnect: List['AccountWhereUniqueInput']
    delete: List['AccountWhereUniqueInput']

    # TODO
    # update: List['AccountUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['AccountUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['AccountScalarWhereInput']
    # upsert: List['AccountUpserteWithWhereUniqueWithoutRelationsInput']


class AccountUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'AccountCreateWithoutRelationsInput'
    connect: 'AccountWhereUniqueInput'
    connect_or_create: 'AccountConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'AccountUpdateInput'
    # upsert: 'AccountUpsertWithoutRelationsInput'


class AccountUpsertInput(TypedDict):
    create: 'AccountCreateInput'
    update: 'AccountUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Account_id_OrderByInput = TypedDict(
    '_Account_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Account_userId_OrderByInput = TypedDict(
    '_Account_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Account_type_OrderByInput = TypedDict(
    '_Account_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Account_provider_OrderByInput = TypedDict(
    '_Account_provider_OrderByInput',
    {
        'provider': 'SortOrder',
    },
    total=True
)

_Account_providerAccountId_OrderByInput = TypedDict(
    '_Account_providerAccountId_OrderByInput',
    {
        'providerAccountId': 'SortOrder',
    },
    total=True
)

_Account_refresh_token_OrderByInput = TypedDict(
    '_Account_refresh_token_OrderByInput',
    {
        'refresh_token': 'SortOrder',
    },
    total=True
)

_Account_access_token_OrderByInput = TypedDict(
    '_Account_access_token_OrderByInput',
    {
        'access_token': 'SortOrder',
    },
    total=True
)

_Account_expires_at_OrderByInput = TypedDict(
    '_Account_expires_at_OrderByInput',
    {
        'expires_at': 'SortOrder',
    },
    total=True
)

_Account_token_type_OrderByInput = TypedDict(
    '_Account_token_type_OrderByInput',
    {
        'token_type': 'SortOrder',
    },
    total=True
)

_Account_scope_OrderByInput = TypedDict(
    '_Account_scope_OrderByInput',
    {
        'scope': 'SortOrder',
    },
    total=True
)

_Account_id_token_OrderByInput = TypedDict(
    '_Account_id_token_OrderByInput',
    {
        'id_token': 'SortOrder',
    },
    total=True
)

_Account_session_state_OrderByInput = TypedDict(
    '_Account_session_state_OrderByInput',
    {
        'session_state': 'SortOrder',
    },
    total=True
)

_Account_RelevanceInner = TypedDict(
    '_Account_RelevanceInner',
    {
        'fields': 'List[AccountScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Account_RelevanceOrderByInput = TypedDict(
    '_Account_RelevanceOrderByInput',
    {
        '_relevance': '_Account_RelevanceInner',
    },
    total=True
)

AccountOrderByInput = Union[
    '_Account_id_OrderByInput',
    '_Account_userId_OrderByInput',
    '_Account_type_OrderByInput',
    '_Account_provider_OrderByInput',
    '_Account_providerAccountId_OrderByInput',
    '_Account_refresh_token_OrderByInput',
    '_Account_access_token_OrderByInput',
    '_Account_expires_at_OrderByInput',
    '_Account_token_type_OrderByInput',
    '_Account_scope_OrderByInput',
    '_Account_id_token_OrderByInput',
    '_Account_session_state_OrderByInput',
    '_Account_RelevanceOrderByInput',
]



# recursive Account types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

AccountRelationFilter = TypedDict(
    'AccountRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class AccountListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class AccountInclude(TypedDict, total=False):
    """Account relational arguments"""
    user: Union[bool, 'UserArgsFromAccount']


    

class UserIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive1']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromAccountRecursive1']
    projects: Union[bool, 'FindManyProjectArgsFromAccountRecursive1']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromAccountRecursive1']
    posts: Union[bool, 'FindManyPostArgsFromAccountRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromAccountRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromAccountRecursive1']


class UserIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive2']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromAccountRecursive2']
    projects: Union[bool, 'FindManyProjectArgsFromAccountRecursive2']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromAccountRecursive2']
    posts: Union[bool, 'FindManyPostArgsFromAccountRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromAccountRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromAccountRecursive2']


class UserIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive3']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromAccountRecursive3']
    projects: Union[bool, 'FindManyProjectArgsFromAccountRecursive3']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromAccountRecursive3']
    posts: Union[bool, 'FindManyPostArgsFromAccountRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromAccountRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromAccountRecursive3']


class UserIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    accounts: Union[bool, 'FindManyAccountArgsFromAccountRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromAccountRecursive4']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromAccountRecursive4']
    projects: Union[bool, 'FindManyProjectArgsFromAccountRecursive4']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromAccountRecursive4']
    posts: Union[bool, 'FindManyPostArgsFromAccountRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromAccountRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromAccountRecursive4']


class UserIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class UserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyUserArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class AccountIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class AccountIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class AccountIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class AccountIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class AccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyAccountArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class SessionIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class SessionIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class SessionIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class SessionIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class SessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManySessionArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""


class VerificationTokenIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class VerificationTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyVerificationTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class PasswordResetTokenIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']


class PasswordResetTokenIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']


class PasswordResetTokenIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']


class PasswordResetTokenIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']


class PasswordResetTokenIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class PasswordResetTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class PasswordResetTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class PasswordResetTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class PasswordResetTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class PasswordResetTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyPasswordResetTokenArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class FindManyPasswordResetTokenArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class FindManyPasswordResetTokenArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class FindManyPasswordResetTokenArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class FindManyPasswordResetTokenArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    
    

class ProjectIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    owner: Union[bool, 'UserArgsFromAccountRecursive1']
    files: Union[bool, 'FindManyProjectFileArgsFromAccountRecursive1']


class ProjectIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    owner: Union[bool, 'UserArgsFromAccountRecursive2']
    files: Union[bool, 'FindManyProjectFileArgsFromAccountRecursive2']


class ProjectIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    owner: Union[bool, 'UserArgsFromAccountRecursive3']
    files: Union[bool, 'FindManyProjectFileArgsFromAccountRecursive3']


class ProjectIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    owner: Union[bool, 'UserArgsFromAccountRecursive4']
    files: Union[bool, 'FindManyProjectFileArgsFromAccountRecursive4']


class ProjectIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class ProjectArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyProjectArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class ProjectFileIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    project: Union[bool, 'ProjectArgsFromAccountRecursive1']
    uploadedBy: Union[bool, 'UserArgsFromAccountRecursive1']


class ProjectFileIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    project: Union[bool, 'ProjectArgsFromAccountRecursive2']
    uploadedBy: Union[bool, 'UserArgsFromAccountRecursive2']


class ProjectFileIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    project: Union[bool, 'ProjectArgsFromAccountRecursive3']
    uploadedBy: Union[bool, 'UserArgsFromAccountRecursive3']


class ProjectFileIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    project: Union[bool, 'ProjectArgsFromAccountRecursive4']
    uploadedBy: Union[bool, 'UserArgsFromAccountRecursive4']


class ProjectFileIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class ProjectFileArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class ProjectFileArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class ProjectFileArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class ProjectFileArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class ProjectFileArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyProjectFileArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class FindManyProjectFileArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class FindManyProjectFileArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class FindManyProjectFileArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class FindManyProjectFileArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    
    

class PostIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    author: Union[bool, 'UserArgsFromAccountRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive1']


class PostIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    author: Union[bool, 'UserArgsFromAccountRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive2']


class PostIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    author: Union[bool, 'UserArgsFromAccountRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive3']


class PostIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    author: Union[bool, 'UserArgsFromAccountRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromAccountRecursive4']


class PostIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class PostArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyPostArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class LikeIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive1']
    post: Union[bool, 'PostArgsFromAccountRecursive1']


class LikeIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive2']
    post: Union[bool, 'PostArgsFromAccountRecursive2']


class LikeIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive3']
    post: Union[bool, 'PostArgsFromAccountRecursive3']


class LikeIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    user: Union[bool, 'UserArgsFromAccountRecursive4']
    post: Union[bool, 'PostArgsFromAccountRecursive4']


class LikeIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class LikeArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyLikeArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class FollowIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""
    follower: Union[bool, 'UserArgsFromAccountRecursive1']
    following: Union[bool, 'UserArgsFromAccountRecursive1']


class FollowIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""
    follower: Union[bool, 'UserArgsFromAccountRecursive2']
    following: Union[bool, 'UserArgsFromAccountRecursive2']


class FollowIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""
    follower: Union[bool, 'UserArgsFromAccountRecursive3']
    following: Union[bool, 'UserArgsFromAccountRecursive3']


class FollowIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""
    follower: Union[bool, 'UserArgsFromAccountRecursive4']
    following: Union[bool, 'UserArgsFromAccountRecursive4']


class FollowIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class FollowArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManyFollowArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    
    

class SecurityAuditLogIncludeFromAccount(TypedDict, total=False):
    """Relational arguments for Account"""


class SecurityAuditLogIncludeFromAccountRecursive1(TypedDict, total=False):
    """Relational arguments for Account"""


class SecurityAuditLogIncludeFromAccountRecursive2(TypedDict, total=False):
    """Relational arguments for Account"""


class SecurityAuditLogIncludeFromAccountRecursive3(TypedDict, total=False):
    """Relational arguments for Account"""


class SecurityAuditLogIncludeFromAccountRecursive4(TypedDict, total=False):
    """Relational arguments for Account"""

    

class SecurityAuditLogArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class SecurityAuditLogArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class SecurityAuditLogArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class SecurityAuditLogArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class SecurityAuditLogArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    
    

class FindManySecurityAuditLogArgsFromAccount(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class FindManySecurityAuditLogArgsFromAccountRecursive1(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class FindManySecurityAuditLogArgsFromAccountRecursive2(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class FindManySecurityAuditLogArgsFromAccountRecursive3(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class FindManySecurityAuditLogArgsFromAccountRecursive4(TypedDict, total=False):
    """Arguments for Account"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    


FindManyAccountArgs = FindManyAccountArgsFromAccount
FindFirstAccountArgs = FindManyAccountArgsFromAccount


    

class AccountWhereInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive1', List['AccountWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive1']
    OR: List['AccountWhereInputRecursive1']
    NOT: List['AccountWhereInputRecursive1']


class AccountWhereInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive2', List['AccountWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive2']
    OR: List['AccountWhereInputRecursive2']
    NOT: List['AccountWhereInputRecursive2']


class AccountWhereInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive3', List['AccountWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive3']
    OR: List['AccountWhereInputRecursive3']
    NOT: List['AccountWhereInputRecursive3']


class AccountWhereInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['AccountWhereInputRecursive4', List['AccountWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['AccountWhereInputRecursive4']
    OR: List['AccountWhereInputRecursive4']
    NOT: List['AccountWhereInputRecursive4']


class AccountWhereInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: Union[_str, 'types.StringFilter']
    provider: Union[_str, 'types.StringFilter']
    providerAccountId: Union[_str, 'types.StringFilter']
    refresh_token: Union[None, _str, 'types.StringFilter']
    access_token: Union[None, _str, 'types.StringFilter']
    expires_at: Union[None, _int, 'types.IntFilter']
    token_type: Union[None, _str, 'types.StringFilter']
    scope: Union[None, _str, 'types.StringFilter']
    id_token: Union[None, _str, 'types.StringFilter']
    session_state: Union[None, _str, 'types.StringFilter']
    user: 'UserRelationFilter'



# aggregate Account types


    

class AccountScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive1']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive1']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive1']


class AccountScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive2']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive2']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive2']


class AccountScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive3']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive3']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive3']


class AccountScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['AccountScalarWhereWithAggregatesInputRecursive4']
    OR: List['AccountScalarWhereWithAggregatesInputRecursive4']
    NOT: List['AccountScalarWhereWithAggregatesInputRecursive4']


class AccountScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Account arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    provider: Union[_str, 'types.StringWithAggregatesFilter']
    providerAccountId: Union[_str, 'types.StringWithAggregatesFilter']
    refresh_token: Union[_str, 'types.StringWithAggregatesFilter']
    access_token: Union[_str, 'types.StringWithAggregatesFilter']
    expires_at: Union[_int, 'types.IntWithAggregatesFilter']
    token_type: Union[_str, 'types.StringWithAggregatesFilter']
    scope: Union[_str, 'types.StringWithAggregatesFilter']
    id_token: Union[_str, 'types.StringWithAggregatesFilter']
    session_state: Union[_str, 'types.StringWithAggregatesFilter']



class AccountGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str
    _sum: 'AccountSumAggregateOutput'
    _avg: 'AccountAvgAggregateOutput'
    _min: 'AccountMinAggregateOutput'
    _max: 'AccountMaxAggregateOutput'
    _count: 'AccountCountAggregateOutput'


class AccountAvgAggregateOutput(TypedDict, total=False):
    """Account output for aggregating averages"""
    expires_at: float


class AccountSumAggregateOutput(TypedDict, total=False):
    """Account output for aggregating sums"""
    expires_at: _int


class AccountScalarAggregateOutput(TypedDict, total=False):
    """Account output including scalar fields"""
    id: _str
    userId: _str
    type: _str
    provider: _str
    providerAccountId: _str
    refresh_token: _str
    access_token: _str
    expires_at: _int
    token_type: _str
    scope: _str
    id_token: _str
    session_state: _str


AccountMinAggregateOutput = AccountScalarAggregateOutput
AccountMaxAggregateOutput = AccountScalarAggregateOutput


class AccountMaxAggregateInput(TypedDict, total=False):
    """Account input for aggregating by max"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool


class AccountMinAggregateInput(TypedDict, total=False):
    """Account input for aggregating by min"""
    id: bool
    userId: bool
    type: bool
    provider: bool
    providerAccountId: bool
    refresh_token: bool
    access_token: bool
    expires_at: bool
    token_type: bool
    scope: bool
    id_token: bool
    session_state: bool


class AccountNumberAggregateInput(TypedDict, total=False):
    """Account input for aggregating numbers"""
    expires_at: bool


AccountAvgAggregateInput = AccountNumberAggregateInput
AccountSumAggregateInput = AccountNumberAggregateInput


AccountCountAggregateInput = TypedDict(
    'AccountCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'type': bool,
        'provider': bool,
        'providerAccountId': bool,
        'refresh_token': bool,
        'access_token': bool,
        'expires_at': bool,
        'token_type': bool,
        'scope': bool,
        'id_token': bool,
        'session_state': bool,
        '_all': bool,
    },
    total=False,
)

AccountCountAggregateOutput = TypedDict(
    'AccountCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'type': int,
        'provider': int,
        'providerAccountId': int,
        'refresh_token': int,
        'access_token': int,
        'expires_at': int,
        'token_type': int,
        'scope': int,
        'id_token': int,
        'session_state': int,
        '_all': int,
    },
    total=False,
)


AccountKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
    'user',
]
AccountScalarFieldKeys = Literal[
    'id',
    'userId',
    'type',
    'provider',
    'providerAccountId',
    'refresh_token',
    'access_token',
    'expires_at',
    'token_type',
    'scope',
    'id_token',
    'session_state',
]
AccountScalarFieldKeysT = TypeVar('AccountScalarFieldKeysT', bound=AccountScalarFieldKeys)

AccountRelationalFieldKeys = Literal[
        'user',
    ]

# Session types

class SessionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Session create method"""
    id: _str
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'


class SessionCreateInput(SessionOptionalCreateInput):
    """Required arguments to the Session create method"""
    sessionToken: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SessionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Session create method, without relations"""
    id: _str
    userId: _str


class SessionCreateWithoutRelationsInput(SessionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Session create method, without relations"""
    sessionToken: _str
    expires: datetime.datetime

class SessionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SessionCreateWithoutRelationsInput'
    where: 'SessionWhereUniqueInput'

class SessionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'


class SessionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SessionCreateWithoutRelationsInput', List['SessionCreateWithoutRelationsInput']]
    connect: Union['SessionWhereUniqueInput', List['SessionWhereUniqueInput']]
    connect_or_create: Union['SessionConnectOrCreateWithoutRelationsInput', List['SessionConnectOrCreateWithoutRelationsInput']]

_SessionWhereUnique_id_Input = TypedDict(
    '_SessionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_SessionWhereUnique_sessionToken_Input = TypedDict(
    '_SessionWhereUnique_sessionToken_Input',
    {
        'sessionToken': '_str',
    },
    total=True
)

SessionWhereUniqueInput = Union[
    '_SessionWhereUnique_id_Input',
    '_SessionWhereUnique_sessionToken_Input',
]


class SessionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class SessionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    sessionToken: _str
    expires: datetime.datetime


class SessionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SessionCreateWithoutRelationsInput']
    connect: List['SessionWhereUniqueInput']
    connect_or_create: List['SessionConnectOrCreateWithoutRelationsInput']
    set: List['SessionWhereUniqueInput']
    disconnect: List['SessionWhereUniqueInput']
    delete: List['SessionWhereUniqueInput']

    # TODO
    # update: List['SessionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SessionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SessionScalarWhereInput']
    # upsert: List['SessionUpserteWithWhereUniqueWithoutRelationsInput']


class SessionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SessionUpdateInput'
    # upsert: 'SessionUpsertWithoutRelationsInput'


class SessionUpsertInput(TypedDict):
    create: 'SessionCreateInput'
    update: 'SessionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Session_id_OrderByInput = TypedDict(
    '_Session_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Session_sessionToken_OrderByInput = TypedDict(
    '_Session_sessionToken_OrderByInput',
    {
        'sessionToken': 'SortOrder',
    },
    total=True
)

_Session_userId_OrderByInput = TypedDict(
    '_Session_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Session_expires_OrderByInput = TypedDict(
    '_Session_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

_Session_RelevanceInner = TypedDict(
    '_Session_RelevanceInner',
    {
        'fields': 'List[SessionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Session_RelevanceOrderByInput = TypedDict(
    '_Session_RelevanceOrderByInput',
    {
        '_relevance': '_Session_RelevanceInner',
    },
    total=True
)

SessionOrderByInput = Union[
    '_Session_id_OrderByInput',
    '_Session_sessionToken_OrderByInput',
    '_Session_userId_OrderByInput',
    '_Session_expires_OrderByInput',
    '_Session_RelevanceOrderByInput',
]



# recursive Session types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SessionRelationFilter = TypedDict(
    'SessionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SessionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SessionInclude(TypedDict, total=False):
    """Session relational arguments"""
    user: Union[bool, 'UserArgsFromSession']


    

class UserIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive1']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromSessionRecursive1']
    projects: Union[bool, 'FindManyProjectArgsFromSessionRecursive1']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromSessionRecursive1']
    posts: Union[bool, 'FindManyPostArgsFromSessionRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromSessionRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromSessionRecursive1']


class UserIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive2']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromSessionRecursive2']
    projects: Union[bool, 'FindManyProjectArgsFromSessionRecursive2']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromSessionRecursive2']
    posts: Union[bool, 'FindManyPostArgsFromSessionRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromSessionRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromSessionRecursive2']


class UserIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive3']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromSessionRecursive3']
    projects: Union[bool, 'FindManyProjectArgsFromSessionRecursive3']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromSessionRecursive3']
    posts: Union[bool, 'FindManyPostArgsFromSessionRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromSessionRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromSessionRecursive3']


class UserIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    accounts: Union[bool, 'FindManyAccountArgsFromSessionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive4']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromSessionRecursive4']
    projects: Union[bool, 'FindManyProjectArgsFromSessionRecursive4']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromSessionRecursive4']
    posts: Union[bool, 'FindManyPostArgsFromSessionRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromSessionRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromSessionRecursive4']


class UserIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class AccountIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class AccountIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class AccountIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class AccountIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class AccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyAccountArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class SessionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class SessionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class SessionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class SessionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""


class VerificationTokenIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class VerificationTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyVerificationTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class PasswordResetTokenIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class PasswordResetTokenIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class PasswordResetTokenIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class PasswordResetTokenIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class PasswordResetTokenIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class PasswordResetTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class PasswordResetTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class PasswordResetTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class PasswordResetTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class PasswordResetTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyPasswordResetTokenArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class FindManyPasswordResetTokenArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class FindManyPasswordResetTokenArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class FindManyPasswordResetTokenArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class FindManyPasswordResetTokenArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    
    

class ProjectIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    owner: Union[bool, 'UserArgsFromSessionRecursive1']
    files: Union[bool, 'FindManyProjectFileArgsFromSessionRecursive1']


class ProjectIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    owner: Union[bool, 'UserArgsFromSessionRecursive2']
    files: Union[bool, 'FindManyProjectFileArgsFromSessionRecursive2']


class ProjectIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    owner: Union[bool, 'UserArgsFromSessionRecursive3']
    files: Union[bool, 'FindManyProjectFileArgsFromSessionRecursive3']


class ProjectIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    owner: Union[bool, 'UserArgsFromSessionRecursive4']
    files: Union[bool, 'FindManyProjectFileArgsFromSessionRecursive4']


class ProjectIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class ProjectArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyProjectArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class ProjectFileIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    project: Union[bool, 'ProjectArgsFromSessionRecursive1']
    uploadedBy: Union[bool, 'UserArgsFromSessionRecursive1']


class ProjectFileIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    project: Union[bool, 'ProjectArgsFromSessionRecursive2']
    uploadedBy: Union[bool, 'UserArgsFromSessionRecursive2']


class ProjectFileIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    project: Union[bool, 'ProjectArgsFromSessionRecursive3']
    uploadedBy: Union[bool, 'UserArgsFromSessionRecursive3']


class ProjectFileIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    project: Union[bool, 'ProjectArgsFromSessionRecursive4']
    uploadedBy: Union[bool, 'UserArgsFromSessionRecursive4']


class ProjectFileIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class ProjectFileArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class ProjectFileArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class ProjectFileArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class ProjectFileArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class ProjectFileArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyProjectFileArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class FindManyProjectFileArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class FindManyProjectFileArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class FindManyProjectFileArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class FindManyProjectFileArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    
    

class PostIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    author: Union[bool, 'UserArgsFromSessionRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive1']


class PostIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    author: Union[bool, 'UserArgsFromSessionRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive2']


class PostIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    author: Union[bool, 'UserArgsFromSessionRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive3']


class PostIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    author: Union[bool, 'UserArgsFromSessionRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromSessionRecursive4']


class PostIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class PostArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyPostArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class LikeIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']
    post: Union[bool, 'PostArgsFromSessionRecursive1']


class LikeIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']
    post: Union[bool, 'PostArgsFromSessionRecursive2']


class LikeIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']
    post: Union[bool, 'PostArgsFromSessionRecursive3']


class LikeIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']
    post: Union[bool, 'PostArgsFromSessionRecursive4']


class LikeIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class LikeArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyLikeArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class FollowIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    follower: Union[bool, 'UserArgsFromSessionRecursive1']
    following: Union[bool, 'UserArgsFromSessionRecursive1']


class FollowIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    follower: Union[bool, 'UserArgsFromSessionRecursive2']
    following: Union[bool, 'UserArgsFromSessionRecursive2']


class FollowIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    follower: Union[bool, 'UserArgsFromSessionRecursive3']
    following: Union[bool, 'UserArgsFromSessionRecursive3']


class FollowIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    follower: Union[bool, 'UserArgsFromSessionRecursive4']
    following: Union[bool, 'UserArgsFromSessionRecursive4']


class FollowIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class FollowArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyFollowArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    
    

class SecurityAuditLogIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""


class SecurityAuditLogIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""


class SecurityAuditLogIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""


class SecurityAuditLogIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""


class SecurityAuditLogIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SecurityAuditLogArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class SecurityAuditLogArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class SecurityAuditLogArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class SecurityAuditLogArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class SecurityAuditLogArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySecurityAuditLogArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class FindManySecurityAuditLogArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class FindManySecurityAuditLogArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class FindManySecurityAuditLogArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class FindManySecurityAuditLogArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    


FindManySessionArgs = FindManySessionArgsFromSession
FindFirstSessionArgs = FindManySessionArgsFromSession


    

class SessionWhereInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive1', List['SessionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive1']
    OR: List['SessionWhereInputRecursive1']
    NOT: List['SessionWhereInputRecursive1']


class SessionWhereInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive2', List['SessionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive2']
    OR: List['SessionWhereInputRecursive2']
    NOT: List['SessionWhereInputRecursive2']


class SessionWhereInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive3', List['SessionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive3']
    OR: List['SessionWhereInputRecursive3']
    NOT: List['SessionWhereInputRecursive3']


class SessionWhereInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive4', List['SessionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive4']
    OR: List['SessionWhereInputRecursive4']
    NOT: List['SessionWhereInputRecursive4']


class SessionWhereInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    sessionToken: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Session types


    

class SessionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive1']


class SessionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive2']


class SessionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive3']


class SessionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive4']


class SessionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    sessionToken: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SessionGroupByOutput(TypedDict, total=False):
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime
    _sum: 'SessionSumAggregateOutput'
    _avg: 'SessionAvgAggregateOutput'
    _min: 'SessionMinAggregateOutput'
    _max: 'SessionMaxAggregateOutput'
    _count: 'SessionCountAggregateOutput'


class SessionAvgAggregateOutput(TypedDict, total=False):
    """Session output for aggregating averages"""


class SessionSumAggregateOutput(TypedDict, total=False):
    """Session output for aggregating sums"""


class SessionScalarAggregateOutput(TypedDict, total=False):
    """Session output including scalar fields"""
    id: _str
    sessionToken: _str
    userId: _str
    expires: datetime.datetime


SessionMinAggregateOutput = SessionScalarAggregateOutput
SessionMaxAggregateOutput = SessionScalarAggregateOutput


class SessionMaxAggregateInput(TypedDict, total=False):
    """Session input for aggregating by max"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool


class SessionMinAggregateInput(TypedDict, total=False):
    """Session input for aggregating by min"""
    id: bool
    sessionToken: bool
    userId: bool
    expires: bool


class SessionNumberAggregateInput(TypedDict, total=False):
    """Session input for aggregating numbers"""


SessionAvgAggregateInput = SessionNumberAggregateInput
SessionSumAggregateInput = SessionNumberAggregateInput


SessionCountAggregateInput = TypedDict(
    'SessionCountAggregateInput',
    {
        'id': bool,
        'sessionToken': bool,
        'userId': bool,
        'expires': bool,
        '_all': bool,
    },
    total=False,
)

SessionCountAggregateOutput = TypedDict(
    'SessionCountAggregateOutput',
    {
        'id': int,
        'sessionToken': int,
        'userId': int,
        'expires': int,
        '_all': int,
    },
    total=False,
)


SessionKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
    'user',
]
SessionScalarFieldKeys = Literal[
    'id',
    'sessionToken',
    'userId',
    'expires',
]
SessionScalarFieldKeysT = TypeVar('SessionScalarFieldKeysT', bound=SessionScalarFieldKeys)

SessionRelationalFieldKeys = Literal[
        'user',
    ]

# VerificationToken types

class VerificationTokenOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the VerificationToken create method"""


class VerificationTokenCreateInput(VerificationTokenOptionalCreateInput):
    """Required arguments to the VerificationToken create method"""
    identifier: _str
    token: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class VerificationTokenOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the VerificationToken create method, without relations"""


class VerificationTokenCreateWithoutRelationsInput(VerificationTokenOptionalCreateWithoutRelationsInput):
    """Required arguments to the VerificationToken create method, without relations"""
    identifier: _str
    token: _str
    expires: datetime.datetime

class VerificationTokenConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    where: 'VerificationTokenWhereUniqueInput'

class VerificationTokenCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    connect: 'VerificationTokenWhereUniqueInput'
    connect_or_create: 'VerificationTokenConnectOrCreateWithoutRelationsInput'


class VerificationTokenCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['VerificationTokenCreateWithoutRelationsInput', List['VerificationTokenCreateWithoutRelationsInput']]
    connect: Union['VerificationTokenWhereUniqueInput', List['VerificationTokenWhereUniqueInput']]
    connect_or_create: Union['VerificationTokenConnectOrCreateWithoutRelationsInput', List['VerificationTokenConnectOrCreateWithoutRelationsInput']]

_VerificationTokenWhereUnique_token_Input = TypedDict(
    '_VerificationTokenWhereUnique_token_Input',
    {
        'token': '_str',
    },
    total=True
)

_VerificationTokenCompoundidentifier_tokenKeyInner = TypedDict(
    '_VerificationTokenCompoundidentifier_tokenKeyInner',
    {
        'identifier': '_str',
        'token': '_str',
    },
    total=True
)

_VerificationTokenCompoundidentifier_tokenKey = TypedDict(
    '_VerificationTokenCompoundidentifier_tokenKey',
    {
        'identifier_token': '_VerificationTokenCompoundidentifier_tokenKeyInner',
    },
    total=True
)

VerificationTokenWhereUniqueInput = Union[
    '_VerificationTokenWhereUnique_token_Input',
    '_VerificationTokenCompoundidentifier_tokenKey',
]


class VerificationTokenUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    identifier: _str
    token: _str
    expires: datetime.datetime


class VerificationTokenUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    identifier: _str
    token: _str
    expires: datetime.datetime


class VerificationTokenUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['VerificationTokenCreateWithoutRelationsInput']
    connect: List['VerificationTokenWhereUniqueInput']
    connect_or_create: List['VerificationTokenConnectOrCreateWithoutRelationsInput']
    set: List['VerificationTokenWhereUniqueInput']
    disconnect: List['VerificationTokenWhereUniqueInput']
    delete: List['VerificationTokenWhereUniqueInput']

    # TODO
    # update: List['VerificationTokenUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['VerificationTokenUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['VerificationTokenScalarWhereInput']
    # upsert: List['VerificationTokenUpserteWithWhereUniqueWithoutRelationsInput']


class VerificationTokenUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'VerificationTokenCreateWithoutRelationsInput'
    connect: 'VerificationTokenWhereUniqueInput'
    connect_or_create: 'VerificationTokenConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'VerificationTokenUpdateInput'
    # upsert: 'VerificationTokenUpsertWithoutRelationsInput'


class VerificationTokenUpsertInput(TypedDict):
    create: 'VerificationTokenCreateInput'
    update: 'VerificationTokenUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_VerificationToken_identifier_OrderByInput = TypedDict(
    '_VerificationToken_identifier_OrderByInput',
    {
        'identifier': 'SortOrder',
    },
    total=True
)

_VerificationToken_token_OrderByInput = TypedDict(
    '_VerificationToken_token_OrderByInput',
    {
        'token': 'SortOrder',
    },
    total=True
)

_VerificationToken_expires_OrderByInput = TypedDict(
    '_VerificationToken_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

_VerificationToken_RelevanceInner = TypedDict(
    '_VerificationToken_RelevanceInner',
    {
        'fields': 'List[VerificationTokenScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_VerificationToken_RelevanceOrderByInput = TypedDict(
    '_VerificationToken_RelevanceOrderByInput',
    {
        '_relevance': '_VerificationToken_RelevanceInner',
    },
    total=True
)

VerificationTokenOrderByInput = Union[
    '_VerificationToken_identifier_OrderByInput',
    '_VerificationToken_token_OrderByInput',
    '_VerificationToken_expires_OrderByInput',
    '_VerificationToken_RelevanceOrderByInput',
]



# recursive VerificationToken types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

VerificationTokenRelationFilter = TypedDict(
    'VerificationTokenRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class VerificationTokenListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class VerificationTokenInclude(TypedDict, total=False):
    """VerificationToken relational arguments"""


    

class UserIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive1']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromVerificationTokenRecursive1']
    projects: Union[bool, 'FindManyProjectArgsFromVerificationTokenRecursive1']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromVerificationTokenRecursive1']
    posts: Union[bool, 'FindManyPostArgsFromVerificationTokenRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromVerificationTokenRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromVerificationTokenRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromVerificationTokenRecursive1']


class UserIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive2']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromVerificationTokenRecursive2']
    projects: Union[bool, 'FindManyProjectArgsFromVerificationTokenRecursive2']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromVerificationTokenRecursive2']
    posts: Union[bool, 'FindManyPostArgsFromVerificationTokenRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromVerificationTokenRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromVerificationTokenRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromVerificationTokenRecursive2']


class UserIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive3']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromVerificationTokenRecursive3']
    projects: Union[bool, 'FindManyProjectArgsFromVerificationTokenRecursive3']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromVerificationTokenRecursive3']
    posts: Union[bool, 'FindManyPostArgsFromVerificationTokenRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromVerificationTokenRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromVerificationTokenRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromVerificationTokenRecursive3']


class UserIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromVerificationTokenRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromVerificationTokenRecursive4']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromVerificationTokenRecursive4']
    projects: Union[bool, 'FindManyProjectArgsFromVerificationTokenRecursive4']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromVerificationTokenRecursive4']
    posts: Union[bool, 'FindManyPostArgsFromVerificationTokenRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromVerificationTokenRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromVerificationTokenRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromVerificationTokenRecursive4']


class UserIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class UserArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyUserArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class AccountIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class AccountIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class AccountIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class AccountIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class AccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyAccountArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class SessionIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class SessionIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class SessionIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class SessionIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class SessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManySessionArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class VerificationTokenIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class VerificationTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyVerificationTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class PasswordResetTokenIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class PasswordResetTokenIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class PasswordResetTokenIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class PasswordResetTokenIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class PasswordResetTokenIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class PasswordResetTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class PasswordResetTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class PasswordResetTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class PasswordResetTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class PasswordResetTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyPasswordResetTokenArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class FindManyPasswordResetTokenArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class FindManyPasswordResetTokenArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class FindManyPasswordResetTokenArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class FindManyPasswordResetTokenArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    
    

class ProjectIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    owner: Union[bool, 'UserArgsFromVerificationTokenRecursive1']
    files: Union[bool, 'FindManyProjectFileArgsFromVerificationTokenRecursive1']


class ProjectIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    owner: Union[bool, 'UserArgsFromVerificationTokenRecursive2']
    files: Union[bool, 'FindManyProjectFileArgsFromVerificationTokenRecursive2']


class ProjectIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    owner: Union[bool, 'UserArgsFromVerificationTokenRecursive3']
    files: Union[bool, 'FindManyProjectFileArgsFromVerificationTokenRecursive3']


class ProjectIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    owner: Union[bool, 'UserArgsFromVerificationTokenRecursive4']
    files: Union[bool, 'FindManyProjectFileArgsFromVerificationTokenRecursive4']


class ProjectIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class ProjectArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyProjectArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class ProjectFileIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    project: Union[bool, 'ProjectArgsFromVerificationTokenRecursive1']
    uploadedBy: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class ProjectFileIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    project: Union[bool, 'ProjectArgsFromVerificationTokenRecursive2']
    uploadedBy: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class ProjectFileIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    project: Union[bool, 'ProjectArgsFromVerificationTokenRecursive3']
    uploadedBy: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class ProjectFileIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    project: Union[bool, 'ProjectArgsFromVerificationTokenRecursive4']
    uploadedBy: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class ProjectFileIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class ProjectFileArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class ProjectFileArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class ProjectFileArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class ProjectFileArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class ProjectFileArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyProjectFileArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class FindManyProjectFileArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class FindManyProjectFileArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class FindManyProjectFileArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class FindManyProjectFileArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    
    

class PostIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    author: Union[bool, 'UserArgsFromVerificationTokenRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromVerificationTokenRecursive1']


class PostIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    author: Union[bool, 'UserArgsFromVerificationTokenRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromVerificationTokenRecursive2']


class PostIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    author: Union[bool, 'UserArgsFromVerificationTokenRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromVerificationTokenRecursive3']


class PostIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    author: Union[bool, 'UserArgsFromVerificationTokenRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromVerificationTokenRecursive4']


class PostIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class PostArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyPostArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class LikeIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive1']
    post: Union[bool, 'PostArgsFromVerificationTokenRecursive1']


class LikeIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive2']
    post: Union[bool, 'PostArgsFromVerificationTokenRecursive2']


class LikeIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive3']
    post: Union[bool, 'PostArgsFromVerificationTokenRecursive3']


class LikeIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    user: Union[bool, 'UserArgsFromVerificationTokenRecursive4']
    post: Union[bool, 'PostArgsFromVerificationTokenRecursive4']


class LikeIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class LikeArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyLikeArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class FollowIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    follower: Union[bool, 'UserArgsFromVerificationTokenRecursive1']
    following: Union[bool, 'UserArgsFromVerificationTokenRecursive1']


class FollowIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    follower: Union[bool, 'UserArgsFromVerificationTokenRecursive2']
    following: Union[bool, 'UserArgsFromVerificationTokenRecursive2']


class FollowIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    follower: Union[bool, 'UserArgsFromVerificationTokenRecursive3']
    following: Union[bool, 'UserArgsFromVerificationTokenRecursive3']


class FollowIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""
    follower: Union[bool, 'UserArgsFromVerificationTokenRecursive4']
    following: Union[bool, 'UserArgsFromVerificationTokenRecursive4']


class FollowIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class FollowArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManyFollowArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    
    

class SecurityAuditLogIncludeFromVerificationToken(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class SecurityAuditLogIncludeFromVerificationTokenRecursive1(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class SecurityAuditLogIncludeFromVerificationTokenRecursive2(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class SecurityAuditLogIncludeFromVerificationTokenRecursive3(TypedDict, total=False):
    """Relational arguments for VerificationToken"""


class SecurityAuditLogIncludeFromVerificationTokenRecursive4(TypedDict, total=False):
    """Relational arguments for VerificationToken"""

    

class SecurityAuditLogArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class SecurityAuditLogArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class SecurityAuditLogArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class SecurityAuditLogArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class SecurityAuditLogArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    
    

class FindManySecurityAuditLogArgsFromVerificationToken(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class FindManySecurityAuditLogArgsFromVerificationTokenRecursive1(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class FindManySecurityAuditLogArgsFromVerificationTokenRecursive2(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class FindManySecurityAuditLogArgsFromVerificationTokenRecursive3(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class FindManySecurityAuditLogArgsFromVerificationTokenRecursive4(TypedDict, total=False):
    """Arguments for VerificationToken"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    


FindManyVerificationTokenArgs = FindManyVerificationTokenArgsFromVerificationToken
FindFirstVerificationTokenArgs = FindManyVerificationTokenArgsFromVerificationToken


    

class VerificationTokenWhereInput(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive1', List['VerificationTokenWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive1']
    OR: List['VerificationTokenWhereInputRecursive1']
    NOT: List['VerificationTokenWhereInputRecursive1']


class VerificationTokenWhereInputRecursive1(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive2', List['VerificationTokenWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive2']
    OR: List['VerificationTokenWhereInputRecursive2']
    NOT: List['VerificationTokenWhereInputRecursive2']


class VerificationTokenWhereInputRecursive2(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive3', List['VerificationTokenWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive3']
    OR: List['VerificationTokenWhereInputRecursive3']
    NOT: List['VerificationTokenWhereInputRecursive3']


class VerificationTokenWhereInputRecursive3(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['VerificationTokenWhereInputRecursive4', List['VerificationTokenWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['VerificationTokenWhereInputRecursive4']
    OR: List['VerificationTokenWhereInputRecursive4']
    NOT: List['VerificationTokenWhereInputRecursive4']


class VerificationTokenWhereInputRecursive4(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expires: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate VerificationToken types


    

class VerificationTokenScalarWhereWithAggregatesInput(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive1']


class VerificationTokenScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive2']


class VerificationTokenScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive3']


class VerificationTokenScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']
    OR: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']
    NOT: List['VerificationTokenScalarWhereWithAggregatesInputRecursive4']


class VerificationTokenScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """VerificationToken arguments for searching"""
    identifier: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class VerificationTokenGroupByOutput(TypedDict, total=False):
    identifier: _str
    token: _str
    expires: datetime.datetime
    _sum: 'VerificationTokenSumAggregateOutput'
    _avg: 'VerificationTokenAvgAggregateOutput'
    _min: 'VerificationTokenMinAggregateOutput'
    _max: 'VerificationTokenMaxAggregateOutput'
    _count: 'VerificationTokenCountAggregateOutput'


class VerificationTokenAvgAggregateOutput(TypedDict, total=False):
    """VerificationToken output for aggregating averages"""


class VerificationTokenSumAggregateOutput(TypedDict, total=False):
    """VerificationToken output for aggregating sums"""


class VerificationTokenScalarAggregateOutput(TypedDict, total=False):
    """VerificationToken output including scalar fields"""
    identifier: _str
    token: _str
    expires: datetime.datetime


VerificationTokenMinAggregateOutput = VerificationTokenScalarAggregateOutput
VerificationTokenMaxAggregateOutput = VerificationTokenScalarAggregateOutput


class VerificationTokenMaxAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating by max"""
    identifier: bool
    token: bool
    expires: bool


class VerificationTokenMinAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating by min"""
    identifier: bool
    token: bool
    expires: bool


class VerificationTokenNumberAggregateInput(TypedDict, total=False):
    """VerificationToken input for aggregating numbers"""


VerificationTokenAvgAggregateInput = VerificationTokenNumberAggregateInput
VerificationTokenSumAggregateInput = VerificationTokenNumberAggregateInput


VerificationTokenCountAggregateInput = TypedDict(
    'VerificationTokenCountAggregateInput',
    {
        'identifier': bool,
        'token': bool,
        'expires': bool,
        '_all': bool,
    },
    total=False,
)

VerificationTokenCountAggregateOutput = TypedDict(
    'VerificationTokenCountAggregateOutput',
    {
        'identifier': int,
        'token': int,
        'expires': int,
        '_all': int,
    },
    total=False,
)


VerificationTokenKeys = Literal[
    'identifier',
    'token',
    'expires',
]
VerificationTokenScalarFieldKeys = Literal[
    'identifier',
    'token',
    'expires',
]
VerificationTokenScalarFieldKeysT = TypeVar('VerificationTokenScalarFieldKeysT', bound=VerificationTokenScalarFieldKeys)

VerificationTokenRelationalFieldKeys = _NoneType

# PasswordResetToken types

class PasswordResetTokenOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PasswordResetToken create method"""
    id: _str
    userId: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    createdAt: datetime.datetime


class PasswordResetTokenCreateInput(PasswordResetTokenOptionalCreateInput):
    """Required arguments to the PasswordResetToken create method"""
    token: _str
    expires: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PasswordResetTokenOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PasswordResetToken create method, without relations"""
    id: _str
    userId: _str
    createdAt: datetime.datetime


class PasswordResetTokenCreateWithoutRelationsInput(PasswordResetTokenOptionalCreateWithoutRelationsInput):
    """Required arguments to the PasswordResetToken create method, without relations"""
    token: _str
    expires: datetime.datetime

class PasswordResetTokenConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PasswordResetTokenCreateWithoutRelationsInput'
    where: 'PasswordResetTokenWhereUniqueInput'

class PasswordResetTokenCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PasswordResetTokenCreateWithoutRelationsInput'
    connect: 'PasswordResetTokenWhereUniqueInput'
    connect_or_create: 'PasswordResetTokenConnectOrCreateWithoutRelationsInput'


class PasswordResetTokenCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PasswordResetTokenCreateWithoutRelationsInput', List['PasswordResetTokenCreateWithoutRelationsInput']]
    connect: Union['PasswordResetTokenWhereUniqueInput', List['PasswordResetTokenWhereUniqueInput']]
    connect_or_create: Union['PasswordResetTokenConnectOrCreateWithoutRelationsInput', List['PasswordResetTokenConnectOrCreateWithoutRelationsInput']]

_PasswordResetTokenWhereUnique_id_Input = TypedDict(
    '_PasswordResetTokenWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_PasswordResetTokenWhereUnique_token_Input = TypedDict(
    '_PasswordResetTokenWhereUnique_token_Input',
    {
        'token': '_str',
    },
    total=True
)

PasswordResetTokenWhereUniqueInput = Union[
    '_PasswordResetTokenWhereUnique_id_Input',
    '_PasswordResetTokenWhereUnique_token_Input',
]


class PasswordResetTokenUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    token: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    expires: datetime.datetime
    createdAt: datetime.datetime


class PasswordResetTokenUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    token: _str
    expires: datetime.datetime
    createdAt: datetime.datetime


class PasswordResetTokenUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PasswordResetTokenCreateWithoutRelationsInput']
    connect: List['PasswordResetTokenWhereUniqueInput']
    connect_or_create: List['PasswordResetTokenConnectOrCreateWithoutRelationsInput']
    set: List['PasswordResetTokenWhereUniqueInput']
    disconnect: List['PasswordResetTokenWhereUniqueInput']
    delete: List['PasswordResetTokenWhereUniqueInput']

    # TODO
    # update: List['PasswordResetTokenUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PasswordResetTokenUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PasswordResetTokenScalarWhereInput']
    # upsert: List['PasswordResetTokenUpserteWithWhereUniqueWithoutRelationsInput']


class PasswordResetTokenUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PasswordResetTokenCreateWithoutRelationsInput'
    connect: 'PasswordResetTokenWhereUniqueInput'
    connect_or_create: 'PasswordResetTokenConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PasswordResetTokenUpdateInput'
    # upsert: 'PasswordResetTokenUpsertWithoutRelationsInput'


class PasswordResetTokenUpsertInput(TypedDict):
    create: 'PasswordResetTokenCreateInput'
    update: 'PasswordResetTokenUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PasswordResetToken_id_OrderByInput = TypedDict(
    '_PasswordResetToken_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PasswordResetToken_token_OrderByInput = TypedDict(
    '_PasswordResetToken_token_OrderByInput',
    {
        'token': 'SortOrder',
    },
    total=True
)

_PasswordResetToken_userId_OrderByInput = TypedDict(
    '_PasswordResetToken_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_PasswordResetToken_expires_OrderByInput = TypedDict(
    '_PasswordResetToken_expires_OrderByInput',
    {
        'expires': 'SortOrder',
    },
    total=True
)

_PasswordResetToken_createdAt_OrderByInput = TypedDict(
    '_PasswordResetToken_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_PasswordResetToken_RelevanceInner = TypedDict(
    '_PasswordResetToken_RelevanceInner',
    {
        'fields': 'List[PasswordResetTokenScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_PasswordResetToken_RelevanceOrderByInput = TypedDict(
    '_PasswordResetToken_RelevanceOrderByInput',
    {
        '_relevance': '_PasswordResetToken_RelevanceInner',
    },
    total=True
)

PasswordResetTokenOrderByInput = Union[
    '_PasswordResetToken_id_OrderByInput',
    '_PasswordResetToken_token_OrderByInput',
    '_PasswordResetToken_userId_OrderByInput',
    '_PasswordResetToken_expires_OrderByInput',
    '_PasswordResetToken_createdAt_OrderByInput',
    '_PasswordResetToken_RelevanceOrderByInput',
]



# recursive PasswordResetToken types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PasswordResetTokenRelationFilter = TypedDict(
    'PasswordResetTokenRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PasswordResetTokenListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PasswordResetTokenInclude(TypedDict, total=False):
    """PasswordResetToken relational arguments"""
    user: Union[bool, 'UserArgsFromPasswordResetToken']


    

class UserIncludeFromPasswordResetToken(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromPasswordResetTokenRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromPasswordResetTokenRecursive1']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromPasswordResetTokenRecursive1']
    projects: Union[bool, 'FindManyProjectArgsFromPasswordResetTokenRecursive1']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromPasswordResetTokenRecursive1']
    posts: Union[bool, 'FindManyPostArgsFromPasswordResetTokenRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromPasswordResetTokenRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromPasswordResetTokenRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromPasswordResetTokenRecursive1']


class UserIncludeFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromPasswordResetTokenRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromPasswordResetTokenRecursive2']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromPasswordResetTokenRecursive2']
    projects: Union[bool, 'FindManyProjectArgsFromPasswordResetTokenRecursive2']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromPasswordResetTokenRecursive2']
    posts: Union[bool, 'FindManyPostArgsFromPasswordResetTokenRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromPasswordResetTokenRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromPasswordResetTokenRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromPasswordResetTokenRecursive2']


class UserIncludeFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromPasswordResetTokenRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromPasswordResetTokenRecursive3']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromPasswordResetTokenRecursive3']
    projects: Union[bool, 'FindManyProjectArgsFromPasswordResetTokenRecursive3']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromPasswordResetTokenRecursive3']
    posts: Union[bool, 'FindManyPostArgsFromPasswordResetTokenRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromPasswordResetTokenRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromPasswordResetTokenRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromPasswordResetTokenRecursive3']


class UserIncludeFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    accounts: Union[bool, 'FindManyAccountArgsFromPasswordResetTokenRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromPasswordResetTokenRecursive4']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromPasswordResetTokenRecursive4']
    projects: Union[bool, 'FindManyProjectArgsFromPasswordResetTokenRecursive4']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromPasswordResetTokenRecursive4']
    posts: Union[bool, 'FindManyPostArgsFromPasswordResetTokenRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromPasswordResetTokenRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromPasswordResetTokenRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromPasswordResetTokenRecursive4']


class UserIncludeFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""

    

class UserArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    
    

class FindManyUserArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromPasswordResetToken(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive1']


class AccountIncludeFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive2']


class AccountIncludeFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive3']


class AccountIncludeFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive4']


class AccountIncludeFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""

    

class AccountArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    
    

class FindManyAccountArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromPasswordResetToken(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive1']


class SessionIncludeFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive2']


class SessionIncludeFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive3']


class SessionIncludeFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive4']


class SessionIncludeFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""

    

class SessionArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    
    

class FindManySessionArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromPasswordResetToken(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""


class VerificationTokenIncludeFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""


class VerificationTokenIncludeFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""


class VerificationTokenIncludeFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""


class VerificationTokenIncludeFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""

    

class VerificationTokenArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    
    

class FindManyVerificationTokenArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class PasswordResetTokenIncludeFromPasswordResetToken(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive1']


class PasswordResetTokenIncludeFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive2']


class PasswordResetTokenIncludeFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive3']


class PasswordResetTokenIncludeFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive4']


class PasswordResetTokenIncludeFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""

    

class PasswordResetTokenArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class PasswordResetTokenArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class PasswordResetTokenArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class PasswordResetTokenArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class PasswordResetTokenArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    
    

class FindManyPasswordResetTokenArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class FindManyPasswordResetTokenArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class FindManyPasswordResetTokenArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class FindManyPasswordResetTokenArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class FindManyPasswordResetTokenArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    
    

class ProjectIncludeFromPasswordResetToken(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    owner: Union[bool, 'UserArgsFromPasswordResetTokenRecursive1']
    files: Union[bool, 'FindManyProjectFileArgsFromPasswordResetTokenRecursive1']


class ProjectIncludeFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    owner: Union[bool, 'UserArgsFromPasswordResetTokenRecursive2']
    files: Union[bool, 'FindManyProjectFileArgsFromPasswordResetTokenRecursive2']


class ProjectIncludeFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    owner: Union[bool, 'UserArgsFromPasswordResetTokenRecursive3']
    files: Union[bool, 'FindManyProjectFileArgsFromPasswordResetTokenRecursive3']


class ProjectIncludeFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    owner: Union[bool, 'UserArgsFromPasswordResetTokenRecursive4']
    files: Union[bool, 'FindManyProjectFileArgsFromPasswordResetTokenRecursive4']


class ProjectIncludeFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""

    

class ProjectArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    
    

class FindManyProjectArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class ProjectFileIncludeFromPasswordResetToken(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    project: Union[bool, 'ProjectArgsFromPasswordResetTokenRecursive1']
    uploadedBy: Union[bool, 'UserArgsFromPasswordResetTokenRecursive1']


class ProjectFileIncludeFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    project: Union[bool, 'ProjectArgsFromPasswordResetTokenRecursive2']
    uploadedBy: Union[bool, 'UserArgsFromPasswordResetTokenRecursive2']


class ProjectFileIncludeFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    project: Union[bool, 'ProjectArgsFromPasswordResetTokenRecursive3']
    uploadedBy: Union[bool, 'UserArgsFromPasswordResetTokenRecursive3']


class ProjectFileIncludeFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    project: Union[bool, 'ProjectArgsFromPasswordResetTokenRecursive4']
    uploadedBy: Union[bool, 'UserArgsFromPasswordResetTokenRecursive4']


class ProjectFileIncludeFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""

    

class ProjectFileArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class ProjectFileArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class ProjectFileArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class ProjectFileArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class ProjectFileArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    
    

class FindManyProjectFileArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class FindManyProjectFileArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class FindManyProjectFileArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class FindManyProjectFileArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class FindManyProjectFileArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    
    

class PostIncludeFromPasswordResetToken(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    author: Union[bool, 'UserArgsFromPasswordResetTokenRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromPasswordResetTokenRecursive1']


class PostIncludeFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    author: Union[bool, 'UserArgsFromPasswordResetTokenRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromPasswordResetTokenRecursive2']


class PostIncludeFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    author: Union[bool, 'UserArgsFromPasswordResetTokenRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromPasswordResetTokenRecursive3']


class PostIncludeFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    author: Union[bool, 'UserArgsFromPasswordResetTokenRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromPasswordResetTokenRecursive4']


class PostIncludeFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""

    

class PostArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    
    

class FindManyPostArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class LikeIncludeFromPasswordResetToken(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive1']
    post: Union[bool, 'PostArgsFromPasswordResetTokenRecursive1']


class LikeIncludeFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive2']
    post: Union[bool, 'PostArgsFromPasswordResetTokenRecursive2']


class LikeIncludeFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive3']
    post: Union[bool, 'PostArgsFromPasswordResetTokenRecursive3']


class LikeIncludeFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    user: Union[bool, 'UserArgsFromPasswordResetTokenRecursive4']
    post: Union[bool, 'PostArgsFromPasswordResetTokenRecursive4']


class LikeIncludeFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""

    

class LikeArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    
    

class FindManyLikeArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class FollowIncludeFromPasswordResetToken(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    follower: Union[bool, 'UserArgsFromPasswordResetTokenRecursive1']
    following: Union[bool, 'UserArgsFromPasswordResetTokenRecursive1']


class FollowIncludeFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    follower: Union[bool, 'UserArgsFromPasswordResetTokenRecursive2']
    following: Union[bool, 'UserArgsFromPasswordResetTokenRecursive2']


class FollowIncludeFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    follower: Union[bool, 'UserArgsFromPasswordResetTokenRecursive3']
    following: Union[bool, 'UserArgsFromPasswordResetTokenRecursive3']


class FollowIncludeFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""
    follower: Union[bool, 'UserArgsFromPasswordResetTokenRecursive4']
    following: Union[bool, 'UserArgsFromPasswordResetTokenRecursive4']


class FollowIncludeFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""

    

class FollowArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    
    

class FindManyFollowArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    
    

class SecurityAuditLogIncludeFromPasswordResetToken(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""


class SecurityAuditLogIncludeFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""


class SecurityAuditLogIncludeFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""


class SecurityAuditLogIncludeFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""


class SecurityAuditLogIncludeFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Relational arguments for PasswordResetToken"""

    

class SecurityAuditLogArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class SecurityAuditLogArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class SecurityAuditLogArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class SecurityAuditLogArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class SecurityAuditLogArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    
    

class FindManySecurityAuditLogArgsFromPasswordResetToken(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class FindManySecurityAuditLogArgsFromPasswordResetTokenRecursive1(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class FindManySecurityAuditLogArgsFromPasswordResetTokenRecursive2(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class FindManySecurityAuditLogArgsFromPasswordResetTokenRecursive3(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class FindManySecurityAuditLogArgsFromPasswordResetTokenRecursive4(TypedDict, total=False):
    """Arguments for PasswordResetToken"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    


FindManyPasswordResetTokenArgs = FindManyPasswordResetTokenArgsFromPasswordResetToken
FindFirstPasswordResetTokenArgs = FindManyPasswordResetTokenArgsFromPasswordResetToken


    

class PasswordResetTokenWhereInput(TypedDict, total=False):
    """PasswordResetToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PasswordResetTokenWhereInputRecursive1', List['PasswordResetTokenWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PasswordResetTokenWhereInputRecursive1']
    OR: List['PasswordResetTokenWhereInputRecursive1']
    NOT: List['PasswordResetTokenWhereInputRecursive1']


class PasswordResetTokenWhereInputRecursive1(TypedDict, total=False):
    """PasswordResetToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PasswordResetTokenWhereInputRecursive2', List['PasswordResetTokenWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PasswordResetTokenWhereInputRecursive2']
    OR: List['PasswordResetTokenWhereInputRecursive2']
    NOT: List['PasswordResetTokenWhereInputRecursive2']


class PasswordResetTokenWhereInputRecursive2(TypedDict, total=False):
    """PasswordResetToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PasswordResetTokenWhereInputRecursive3', List['PasswordResetTokenWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PasswordResetTokenWhereInputRecursive3']
    OR: List['PasswordResetTokenWhereInputRecursive3']
    NOT: List['PasswordResetTokenWhereInputRecursive3']


class PasswordResetTokenWhereInputRecursive3(TypedDict, total=False):
    """PasswordResetToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PasswordResetTokenWhereInputRecursive4', List['PasswordResetTokenWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PasswordResetTokenWhereInputRecursive4']
    OR: List['PasswordResetTokenWhereInputRecursive4']
    NOT: List['PasswordResetTokenWhereInputRecursive4']


class PasswordResetTokenWhereInputRecursive4(TypedDict, total=False):
    """PasswordResetToken arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    expires: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate PasswordResetToken types


    

class PasswordResetTokenScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PasswordResetToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PasswordResetTokenScalarWhereWithAggregatesInputRecursive1']
    OR: List['PasswordResetTokenScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PasswordResetTokenScalarWhereWithAggregatesInputRecursive1']


class PasswordResetTokenScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """PasswordResetToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PasswordResetTokenScalarWhereWithAggregatesInputRecursive2']
    OR: List['PasswordResetTokenScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PasswordResetTokenScalarWhereWithAggregatesInputRecursive2']


class PasswordResetTokenScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """PasswordResetToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PasswordResetTokenScalarWhereWithAggregatesInputRecursive3']
    OR: List['PasswordResetTokenScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PasswordResetTokenScalarWhereWithAggregatesInputRecursive3']


class PasswordResetTokenScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """PasswordResetToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PasswordResetTokenScalarWhereWithAggregatesInputRecursive4']
    OR: List['PasswordResetTokenScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PasswordResetTokenScalarWhereWithAggregatesInputRecursive4']


class PasswordResetTokenScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """PasswordResetToken arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    expires: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class PasswordResetTokenGroupByOutput(TypedDict, total=False):
    id: _str
    token: _str
    userId: _str
    expires: datetime.datetime
    createdAt: datetime.datetime
    _sum: 'PasswordResetTokenSumAggregateOutput'
    _avg: 'PasswordResetTokenAvgAggregateOutput'
    _min: 'PasswordResetTokenMinAggregateOutput'
    _max: 'PasswordResetTokenMaxAggregateOutput'
    _count: 'PasswordResetTokenCountAggregateOutput'


class PasswordResetTokenAvgAggregateOutput(TypedDict, total=False):
    """PasswordResetToken output for aggregating averages"""


class PasswordResetTokenSumAggregateOutput(TypedDict, total=False):
    """PasswordResetToken output for aggregating sums"""


class PasswordResetTokenScalarAggregateOutput(TypedDict, total=False):
    """PasswordResetToken output including scalar fields"""
    id: _str
    token: _str
    userId: _str
    expires: datetime.datetime
    createdAt: datetime.datetime


PasswordResetTokenMinAggregateOutput = PasswordResetTokenScalarAggregateOutput
PasswordResetTokenMaxAggregateOutput = PasswordResetTokenScalarAggregateOutput


class PasswordResetTokenMaxAggregateInput(TypedDict, total=False):
    """PasswordResetToken input for aggregating by max"""
    id: bool
    token: bool
    userId: bool
    expires: bool
    createdAt: bool


class PasswordResetTokenMinAggregateInput(TypedDict, total=False):
    """PasswordResetToken input for aggregating by min"""
    id: bool
    token: bool
    userId: bool
    expires: bool
    createdAt: bool


class PasswordResetTokenNumberAggregateInput(TypedDict, total=False):
    """PasswordResetToken input for aggregating numbers"""


PasswordResetTokenAvgAggregateInput = PasswordResetTokenNumberAggregateInput
PasswordResetTokenSumAggregateInput = PasswordResetTokenNumberAggregateInput


PasswordResetTokenCountAggregateInput = TypedDict(
    'PasswordResetTokenCountAggregateInput',
    {
        'id': bool,
        'token': bool,
        'userId': bool,
        'expires': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

PasswordResetTokenCountAggregateOutput = TypedDict(
    'PasswordResetTokenCountAggregateOutput',
    {
        'id': int,
        'token': int,
        'userId': int,
        'expires': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


PasswordResetTokenKeys = Literal[
    'id',
    'token',
    'userId',
    'user',
    'expires',
    'createdAt',
]
PasswordResetTokenScalarFieldKeys = Literal[
    'id',
    'token',
    'userId',
    'expires',
    'createdAt',
]
PasswordResetTokenScalarFieldKeysT = TypeVar('PasswordResetTokenScalarFieldKeysT', bound=PasswordResetTokenScalarFieldKeys)

PasswordResetTokenRelationalFieldKeys = Literal[
        'user',
    ]

# Project types

class ProjectOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Project create method"""
    id: _str
    description: Optional[_str]
    isFree: _bool
    coinCost: Optional[_int]
    owner: 'UserCreateNestedWithoutRelationsInput'
    ownerId: _str
    files: 'ProjectFileCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ProjectCreateInput(ProjectOptionalCreateInput):
    """Required arguments to the Project create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProjectOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Project create method, without relations"""
    id: _str
    description: Optional[_str]
    isFree: _bool
    coinCost: Optional[_int]
    ownerId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ProjectCreateWithoutRelationsInput(ProjectOptionalCreateWithoutRelationsInput):
    """Required arguments to the Project create method, without relations"""
    name: _str

class ProjectConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProjectCreateWithoutRelationsInput'
    where: 'ProjectWhereUniqueInput'

class ProjectCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProjectCreateWithoutRelationsInput'
    connect: 'ProjectWhereUniqueInput'
    connect_or_create: 'ProjectConnectOrCreateWithoutRelationsInput'


class ProjectCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProjectCreateWithoutRelationsInput', List['ProjectCreateWithoutRelationsInput']]
    connect: Union['ProjectWhereUniqueInput', List['ProjectWhereUniqueInput']]
    connect_or_create: Union['ProjectConnectOrCreateWithoutRelationsInput', List['ProjectConnectOrCreateWithoutRelationsInput']]

_ProjectWhereUnique_id_Input = TypedDict(
    '_ProjectWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ProjectWhereUniqueInput = _ProjectWhereUnique_id_Input


class ProjectUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    description: Optional[_str]
    isFree: _bool
    coinCost: Optional[Union[AtomicIntInput, _int]]
    owner: 'UserUpdateOneWithoutRelationsInput'
    files: 'ProjectFileUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ProjectUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    description: Optional[_str]
    isFree: _bool
    coinCost: Optional[Union[AtomicIntInput, _int]]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ProjectUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProjectCreateWithoutRelationsInput']
    connect: List['ProjectWhereUniqueInput']
    connect_or_create: List['ProjectConnectOrCreateWithoutRelationsInput']
    set: List['ProjectWhereUniqueInput']
    disconnect: List['ProjectWhereUniqueInput']
    delete: List['ProjectWhereUniqueInput']

    # TODO
    # update: List['ProjectUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProjectUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProjectScalarWhereInput']
    # upsert: List['ProjectUpserteWithWhereUniqueWithoutRelationsInput']


class ProjectUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProjectCreateWithoutRelationsInput'
    connect: 'ProjectWhereUniqueInput'
    connect_or_create: 'ProjectConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProjectUpdateInput'
    # upsert: 'ProjectUpsertWithoutRelationsInput'


class ProjectUpsertInput(TypedDict):
    create: 'ProjectCreateInput'
    update: 'ProjectUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Project_id_OrderByInput = TypedDict(
    '_Project_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Project_name_OrderByInput = TypedDict(
    '_Project_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Project_description_OrderByInput = TypedDict(
    '_Project_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Project_isFree_OrderByInput = TypedDict(
    '_Project_isFree_OrderByInput',
    {
        'isFree': 'SortOrder',
    },
    total=True
)

_Project_coinCost_OrderByInput = TypedDict(
    '_Project_coinCost_OrderByInput',
    {
        'coinCost': 'SortOrder',
    },
    total=True
)

_Project_ownerId_OrderByInput = TypedDict(
    '_Project_ownerId_OrderByInput',
    {
        'ownerId': 'SortOrder',
    },
    total=True
)

_Project_createdAt_OrderByInput = TypedDict(
    '_Project_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Project_updatedAt_OrderByInput = TypedDict(
    '_Project_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Project_RelevanceInner = TypedDict(
    '_Project_RelevanceInner',
    {
        'fields': 'List[ProjectScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Project_RelevanceOrderByInput = TypedDict(
    '_Project_RelevanceOrderByInput',
    {
        '_relevance': '_Project_RelevanceInner',
    },
    total=True
)

ProjectOrderByInput = Union[
    '_Project_id_OrderByInput',
    '_Project_name_OrderByInput',
    '_Project_description_OrderByInput',
    '_Project_isFree_OrderByInput',
    '_Project_coinCost_OrderByInput',
    '_Project_ownerId_OrderByInput',
    '_Project_createdAt_OrderByInput',
    '_Project_updatedAt_OrderByInput',
    '_Project_RelevanceOrderByInput',
]



# recursive Project types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProjectRelationFilter = TypedDict(
    'ProjectRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProjectListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProjectInclude(TypedDict, total=False):
    """Project relational arguments"""
    owner: Union[bool, 'UserArgsFromProject']
    files: Union[bool, 'FindManyProjectFileArgsFromProject']


    

class UserIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    accounts: Union[bool, 'FindManyAccountArgsFromProjectRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromProjectRecursive1']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromProjectRecursive1']
    projects: Union[bool, 'FindManyProjectArgsFromProjectRecursive1']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromProjectRecursive1']
    posts: Union[bool, 'FindManyPostArgsFromProjectRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromProjectRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromProjectRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromProjectRecursive1']


class UserIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    accounts: Union[bool, 'FindManyAccountArgsFromProjectRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromProjectRecursive2']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromProjectRecursive2']
    projects: Union[bool, 'FindManyProjectArgsFromProjectRecursive2']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromProjectRecursive2']
    posts: Union[bool, 'FindManyPostArgsFromProjectRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromProjectRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromProjectRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromProjectRecursive2']


class UserIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    accounts: Union[bool, 'FindManyAccountArgsFromProjectRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromProjectRecursive3']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromProjectRecursive3']
    projects: Union[bool, 'FindManyProjectArgsFromProjectRecursive3']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromProjectRecursive3']
    posts: Union[bool, 'FindManyPostArgsFromProjectRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromProjectRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromProjectRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromProjectRecursive3']


class UserIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    accounts: Union[bool, 'FindManyAccountArgsFromProjectRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromProjectRecursive4']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromProjectRecursive4']
    projects: Union[bool, 'FindManyProjectArgsFromProjectRecursive4']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromProjectRecursive4']
    posts: Union[bool, 'FindManyPostArgsFromProjectRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromProjectRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromProjectRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromProjectRecursive4']


class UserIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class UserArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyUserArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive1']


class AccountIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive2']


class AccountIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive3']


class AccountIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive4']


class AccountIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class AccountArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyAccountArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive1']


class SessionIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive2']


class SessionIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive3']


class SessionIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive4']


class SessionIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class SessionArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManySessionArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""


class VerificationTokenIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""


class VerificationTokenIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""


class VerificationTokenIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""


class VerificationTokenIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class VerificationTokenArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyVerificationTokenArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class PasswordResetTokenIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive1']


class PasswordResetTokenIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive2']


class PasswordResetTokenIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive3']


class PasswordResetTokenIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive4']


class PasswordResetTokenIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class PasswordResetTokenArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class PasswordResetTokenArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class PasswordResetTokenArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class PasswordResetTokenArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class PasswordResetTokenArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyPasswordResetTokenArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class FindManyPasswordResetTokenArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class FindManyPasswordResetTokenArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class FindManyPasswordResetTokenArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class FindManyPasswordResetTokenArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    
    

class ProjectIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    owner: Union[bool, 'UserArgsFromProjectRecursive1']
    files: Union[bool, 'FindManyProjectFileArgsFromProjectRecursive1']


class ProjectIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    owner: Union[bool, 'UserArgsFromProjectRecursive2']
    files: Union[bool, 'FindManyProjectFileArgsFromProjectRecursive2']


class ProjectIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    owner: Union[bool, 'UserArgsFromProjectRecursive3']
    files: Union[bool, 'FindManyProjectFileArgsFromProjectRecursive3']


class ProjectIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    owner: Union[bool, 'UserArgsFromProjectRecursive4']
    files: Union[bool, 'FindManyProjectFileArgsFromProjectRecursive4']


class ProjectIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class ProjectArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyProjectArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class ProjectFileIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    project: Union[bool, 'ProjectArgsFromProjectRecursive1']
    uploadedBy: Union[bool, 'UserArgsFromProjectRecursive1']


class ProjectFileIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    project: Union[bool, 'ProjectArgsFromProjectRecursive2']
    uploadedBy: Union[bool, 'UserArgsFromProjectRecursive2']


class ProjectFileIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    project: Union[bool, 'ProjectArgsFromProjectRecursive3']
    uploadedBy: Union[bool, 'UserArgsFromProjectRecursive3']


class ProjectFileIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    project: Union[bool, 'ProjectArgsFromProjectRecursive4']
    uploadedBy: Union[bool, 'UserArgsFromProjectRecursive4']


class ProjectFileIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class ProjectFileArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class ProjectFileArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class ProjectFileArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class ProjectFileArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class ProjectFileArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyProjectFileArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class FindManyProjectFileArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class FindManyProjectFileArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class FindManyProjectFileArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class FindManyProjectFileArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    
    

class PostIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    author: Union[bool, 'UserArgsFromProjectRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromProjectRecursive1']


class PostIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    author: Union[bool, 'UserArgsFromProjectRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromProjectRecursive2']


class PostIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    author: Union[bool, 'UserArgsFromProjectRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromProjectRecursive3']


class PostIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    author: Union[bool, 'UserArgsFromProjectRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromProjectRecursive4']


class PostIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class PostArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyPostArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class LikeIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive1']
    post: Union[bool, 'PostArgsFromProjectRecursive1']


class LikeIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive2']
    post: Union[bool, 'PostArgsFromProjectRecursive2']


class LikeIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive3']
    post: Union[bool, 'PostArgsFromProjectRecursive3']


class LikeIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    user: Union[bool, 'UserArgsFromProjectRecursive4']
    post: Union[bool, 'PostArgsFromProjectRecursive4']


class LikeIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class LikeArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyLikeArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class FollowIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""
    follower: Union[bool, 'UserArgsFromProjectRecursive1']
    following: Union[bool, 'UserArgsFromProjectRecursive1']


class FollowIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""
    follower: Union[bool, 'UserArgsFromProjectRecursive2']
    following: Union[bool, 'UserArgsFromProjectRecursive2']


class FollowIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""
    follower: Union[bool, 'UserArgsFromProjectRecursive3']
    following: Union[bool, 'UserArgsFromProjectRecursive3']


class FollowIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""
    follower: Union[bool, 'UserArgsFromProjectRecursive4']
    following: Union[bool, 'UserArgsFromProjectRecursive4']


class FollowIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class FollowArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManyFollowArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    
    

class SecurityAuditLogIncludeFromProject(TypedDict, total=False):
    """Relational arguments for Project"""


class SecurityAuditLogIncludeFromProjectRecursive1(TypedDict, total=False):
    """Relational arguments for Project"""


class SecurityAuditLogIncludeFromProjectRecursive2(TypedDict, total=False):
    """Relational arguments for Project"""


class SecurityAuditLogIncludeFromProjectRecursive3(TypedDict, total=False):
    """Relational arguments for Project"""


class SecurityAuditLogIncludeFromProjectRecursive4(TypedDict, total=False):
    """Relational arguments for Project"""

    

class SecurityAuditLogArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class SecurityAuditLogArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class SecurityAuditLogArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class SecurityAuditLogArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class SecurityAuditLogArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    
    

class FindManySecurityAuditLogArgsFromProject(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class FindManySecurityAuditLogArgsFromProjectRecursive1(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class FindManySecurityAuditLogArgsFromProjectRecursive2(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class FindManySecurityAuditLogArgsFromProjectRecursive3(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class FindManySecurityAuditLogArgsFromProjectRecursive4(TypedDict, total=False):
    """Arguments for Project"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    


FindManyProjectArgs = FindManyProjectArgsFromProject
FindFirstProjectArgs = FindManyProjectArgsFromProject


    

class ProjectWhereInput(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isFree: Union[_bool, 'types.BooleanFilter']
    coinCost: Union[None, _int, 'types.IntFilter']
    owner: 'UserRelationFilter'
    ownerId: Union[_str, 'types.StringFilter']
    files: 'ProjectFileListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ProjectWhereInputRecursive1', List['ProjectWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProjectWhereInputRecursive1']
    OR: List['ProjectWhereInputRecursive1']
    NOT: List['ProjectWhereInputRecursive1']


class ProjectWhereInputRecursive1(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isFree: Union[_bool, 'types.BooleanFilter']
    coinCost: Union[None, _int, 'types.IntFilter']
    owner: 'UserRelationFilter'
    ownerId: Union[_str, 'types.StringFilter']
    files: 'ProjectFileListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ProjectWhereInputRecursive2', List['ProjectWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProjectWhereInputRecursive2']
    OR: List['ProjectWhereInputRecursive2']
    NOT: List['ProjectWhereInputRecursive2']


class ProjectWhereInputRecursive2(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isFree: Union[_bool, 'types.BooleanFilter']
    coinCost: Union[None, _int, 'types.IntFilter']
    owner: 'UserRelationFilter'
    ownerId: Union[_str, 'types.StringFilter']
    files: 'ProjectFileListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ProjectWhereInputRecursive3', List['ProjectWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProjectWhereInputRecursive3']
    OR: List['ProjectWhereInputRecursive3']
    NOT: List['ProjectWhereInputRecursive3']


class ProjectWhereInputRecursive3(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isFree: Union[_bool, 'types.BooleanFilter']
    coinCost: Union[None, _int, 'types.IntFilter']
    owner: 'UserRelationFilter'
    ownerId: Union[_str, 'types.StringFilter']
    files: 'ProjectFileListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ProjectWhereInputRecursive4', List['ProjectWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProjectWhereInputRecursive4']
    OR: List['ProjectWhereInputRecursive4']
    NOT: List['ProjectWhereInputRecursive4']


class ProjectWhereInputRecursive4(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    isFree: Union[_bool, 'types.BooleanFilter']
    coinCost: Union[None, _int, 'types.IntFilter']
    owner: 'UserRelationFilter'
    ownerId: Union[_str, 'types.StringFilter']
    files: 'ProjectFileListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Project types


    

class ProjectScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isFree: Union[_bool, 'types.BooleanWithAggregatesFilter']
    coinCost: Union[_int, 'types.IntWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProjectScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProjectScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProjectScalarWhereWithAggregatesInputRecursive1']


class ProjectScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isFree: Union[_bool, 'types.BooleanWithAggregatesFilter']
    coinCost: Union[_int, 'types.IntWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProjectScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProjectScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProjectScalarWhereWithAggregatesInputRecursive2']


class ProjectScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isFree: Union[_bool, 'types.BooleanWithAggregatesFilter']
    coinCost: Union[_int, 'types.IntWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProjectScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProjectScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProjectScalarWhereWithAggregatesInputRecursive3']


class ProjectScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isFree: Union[_bool, 'types.BooleanWithAggregatesFilter']
    coinCost: Union[_int, 'types.IntWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProjectScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProjectScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProjectScalarWhereWithAggregatesInputRecursive4']


class ProjectScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Project arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    isFree: Union[_bool, 'types.BooleanWithAggregatesFilter']
    coinCost: Union[_int, 'types.IntWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ProjectGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    description: _str
    isFree: _bool
    coinCost: _int
    ownerId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ProjectSumAggregateOutput'
    _avg: 'ProjectAvgAggregateOutput'
    _min: 'ProjectMinAggregateOutput'
    _max: 'ProjectMaxAggregateOutput'
    _count: 'ProjectCountAggregateOutput'


class ProjectAvgAggregateOutput(TypedDict, total=False):
    """Project output for aggregating averages"""
    coinCost: float


class ProjectSumAggregateOutput(TypedDict, total=False):
    """Project output for aggregating sums"""
    coinCost: _int


class ProjectScalarAggregateOutput(TypedDict, total=False):
    """Project output including scalar fields"""
    id: _str
    name: _str
    description: _str
    isFree: _bool
    coinCost: _int
    ownerId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ProjectMinAggregateOutput = ProjectScalarAggregateOutput
ProjectMaxAggregateOutput = ProjectScalarAggregateOutput


class ProjectMaxAggregateInput(TypedDict, total=False):
    """Project input for aggregating by max"""
    id: bool
    name: bool
    description: bool
    isFree: bool
    coinCost: bool
    ownerId: bool
    createdAt: bool
    updatedAt: bool


class ProjectMinAggregateInput(TypedDict, total=False):
    """Project input for aggregating by min"""
    id: bool
    name: bool
    description: bool
    isFree: bool
    coinCost: bool
    ownerId: bool
    createdAt: bool
    updatedAt: bool


class ProjectNumberAggregateInput(TypedDict, total=False):
    """Project input for aggregating numbers"""
    coinCost: bool


ProjectAvgAggregateInput = ProjectNumberAggregateInput
ProjectSumAggregateInput = ProjectNumberAggregateInput


ProjectCountAggregateInput = TypedDict(
    'ProjectCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'description': bool,
        'isFree': bool,
        'coinCost': bool,
        'ownerId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ProjectCountAggregateOutput = TypedDict(
    'ProjectCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'description': int,
        'isFree': int,
        'coinCost': int,
        'ownerId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ProjectKeys = Literal[
    'id',
    'name',
    'description',
    'isFree',
    'coinCost',
    'owner',
    'ownerId',
    'files',
    'createdAt',
    'updatedAt',
]
ProjectScalarFieldKeys = Literal[
    'id',
    'name',
    'description',
    'isFree',
    'coinCost',
    'ownerId',
    'createdAt',
    'updatedAt',
]
ProjectScalarFieldKeysT = TypeVar('ProjectScalarFieldKeysT', bound=ProjectScalarFieldKeys)

ProjectRelationalFieldKeys = Literal[
        'owner',
        'files',
    ]

# ProjectFile types

class ProjectFileOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ProjectFile create method"""
    id: _str
    project: 'ProjectCreateNestedWithoutRelationsInput'
    projectId: _str
    fileUrl: Optional[_str]
    isPublic: _bool
    uploadedBy: 'UserCreateNestedWithoutRelationsInput'
    uploadedById: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ProjectFileCreateInput(ProjectFileOptionalCreateInput):
    """Required arguments to the ProjectFile create method"""
    fileName: _str
    appwriteId: _str
    fileSize: _int
    mimeType: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProjectFileOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ProjectFile create method, without relations"""
    id: _str
    projectId: _str
    fileUrl: Optional[_str]
    isPublic: _bool
    uploadedById: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ProjectFileCreateWithoutRelationsInput(ProjectFileOptionalCreateWithoutRelationsInput):
    """Required arguments to the ProjectFile create method, without relations"""
    fileName: _str
    appwriteId: _str
    fileSize: _int
    mimeType: _str

class ProjectFileConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ProjectFileCreateWithoutRelationsInput'
    where: 'ProjectFileWhereUniqueInput'

class ProjectFileCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProjectFileCreateWithoutRelationsInput'
    connect: 'ProjectFileWhereUniqueInput'
    connect_or_create: 'ProjectFileConnectOrCreateWithoutRelationsInput'


class ProjectFileCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProjectFileCreateWithoutRelationsInput', List['ProjectFileCreateWithoutRelationsInput']]
    connect: Union['ProjectFileWhereUniqueInput', List['ProjectFileWhereUniqueInput']]
    connect_or_create: Union['ProjectFileConnectOrCreateWithoutRelationsInput', List['ProjectFileConnectOrCreateWithoutRelationsInput']]

_ProjectFileWhereUnique_id_Input = TypedDict(
    '_ProjectFileWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ProjectFileWhereUnique_appwriteId_Input = TypedDict(
    '_ProjectFileWhereUnique_appwriteId_Input',
    {
        'appwriteId': '_str',
    },
    total=True
)

ProjectFileWhereUniqueInput = Union[
    '_ProjectFileWhereUnique_id_Input',
    '_ProjectFileWhereUnique_appwriteId_Input',
]


class ProjectFileUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    project: 'ProjectUpdateOneWithoutRelationsInput'
    fileName: _str
    appwriteId: _str
    fileSize: Union[AtomicIntInput, _int]
    mimeType: _str
    fileUrl: Optional[_str]
    isPublic: _bool
    uploadedBy: 'UserUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ProjectFileUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    fileName: _str
    appwriteId: _str
    fileSize: Union[AtomicIntInput, _int]
    mimeType: _str
    fileUrl: Optional[_str]
    isPublic: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ProjectFileUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProjectFileCreateWithoutRelationsInput']
    connect: List['ProjectFileWhereUniqueInput']
    connect_or_create: List['ProjectFileConnectOrCreateWithoutRelationsInput']
    set: List['ProjectFileWhereUniqueInput']
    disconnect: List['ProjectFileWhereUniqueInput']
    delete: List['ProjectFileWhereUniqueInput']

    # TODO
    # update: List['ProjectFileUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProjectFileUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProjectFileScalarWhereInput']
    # upsert: List['ProjectFileUpserteWithWhereUniqueWithoutRelationsInput']


class ProjectFileUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProjectFileCreateWithoutRelationsInput'
    connect: 'ProjectFileWhereUniqueInput'
    connect_or_create: 'ProjectFileConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProjectFileUpdateInput'
    # upsert: 'ProjectFileUpsertWithoutRelationsInput'


class ProjectFileUpsertInput(TypedDict):
    create: 'ProjectFileCreateInput'
    update: 'ProjectFileUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ProjectFile_id_OrderByInput = TypedDict(
    '_ProjectFile_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ProjectFile_projectId_OrderByInput = TypedDict(
    '_ProjectFile_projectId_OrderByInput',
    {
        'projectId': 'SortOrder',
    },
    total=True
)

_ProjectFile_fileName_OrderByInput = TypedDict(
    '_ProjectFile_fileName_OrderByInput',
    {
        'fileName': 'SortOrder',
    },
    total=True
)

_ProjectFile_appwriteId_OrderByInput = TypedDict(
    '_ProjectFile_appwriteId_OrderByInput',
    {
        'appwriteId': 'SortOrder',
    },
    total=True
)

_ProjectFile_fileSize_OrderByInput = TypedDict(
    '_ProjectFile_fileSize_OrderByInput',
    {
        'fileSize': 'SortOrder',
    },
    total=True
)

_ProjectFile_mimeType_OrderByInput = TypedDict(
    '_ProjectFile_mimeType_OrderByInput',
    {
        'mimeType': 'SortOrder',
    },
    total=True
)

_ProjectFile_fileUrl_OrderByInput = TypedDict(
    '_ProjectFile_fileUrl_OrderByInput',
    {
        'fileUrl': 'SortOrder',
    },
    total=True
)

_ProjectFile_isPublic_OrderByInput = TypedDict(
    '_ProjectFile_isPublic_OrderByInput',
    {
        'isPublic': 'SortOrder',
    },
    total=True
)

_ProjectFile_uploadedById_OrderByInput = TypedDict(
    '_ProjectFile_uploadedById_OrderByInput',
    {
        'uploadedById': 'SortOrder',
    },
    total=True
)

_ProjectFile_createdAt_OrderByInput = TypedDict(
    '_ProjectFile_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_ProjectFile_updatedAt_OrderByInput = TypedDict(
    '_ProjectFile_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_ProjectFile_RelevanceInner = TypedDict(
    '_ProjectFile_RelevanceInner',
    {
        'fields': 'List[ProjectFileScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ProjectFile_RelevanceOrderByInput = TypedDict(
    '_ProjectFile_RelevanceOrderByInput',
    {
        '_relevance': '_ProjectFile_RelevanceInner',
    },
    total=True
)

ProjectFileOrderByInput = Union[
    '_ProjectFile_id_OrderByInput',
    '_ProjectFile_projectId_OrderByInput',
    '_ProjectFile_fileName_OrderByInput',
    '_ProjectFile_appwriteId_OrderByInput',
    '_ProjectFile_fileSize_OrderByInput',
    '_ProjectFile_mimeType_OrderByInput',
    '_ProjectFile_fileUrl_OrderByInput',
    '_ProjectFile_isPublic_OrderByInput',
    '_ProjectFile_uploadedById_OrderByInput',
    '_ProjectFile_createdAt_OrderByInput',
    '_ProjectFile_updatedAt_OrderByInput',
    '_ProjectFile_RelevanceOrderByInput',
]



# recursive ProjectFile types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ProjectFileRelationFilter = TypedDict(
    'ProjectFileRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProjectFileListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProjectFileInclude(TypedDict, total=False):
    """ProjectFile relational arguments"""
    project: Union[bool, 'ProjectArgsFromProjectFile']
    uploadedBy: Union[bool, 'UserArgsFromProjectFile']


    

class UserIncludeFromProjectFile(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    accounts: Union[bool, 'FindManyAccountArgsFromProjectFileRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromProjectFileRecursive1']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromProjectFileRecursive1']
    projects: Union[bool, 'FindManyProjectArgsFromProjectFileRecursive1']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromProjectFileRecursive1']
    posts: Union[bool, 'FindManyPostArgsFromProjectFileRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromProjectFileRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromProjectFileRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromProjectFileRecursive1']


class UserIncludeFromProjectFileRecursive1(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    accounts: Union[bool, 'FindManyAccountArgsFromProjectFileRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromProjectFileRecursive2']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromProjectFileRecursive2']
    projects: Union[bool, 'FindManyProjectArgsFromProjectFileRecursive2']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromProjectFileRecursive2']
    posts: Union[bool, 'FindManyPostArgsFromProjectFileRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromProjectFileRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromProjectFileRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromProjectFileRecursive2']


class UserIncludeFromProjectFileRecursive2(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    accounts: Union[bool, 'FindManyAccountArgsFromProjectFileRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromProjectFileRecursive3']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromProjectFileRecursive3']
    projects: Union[bool, 'FindManyProjectArgsFromProjectFileRecursive3']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromProjectFileRecursive3']
    posts: Union[bool, 'FindManyPostArgsFromProjectFileRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromProjectFileRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromProjectFileRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromProjectFileRecursive3']


class UserIncludeFromProjectFileRecursive3(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    accounts: Union[bool, 'FindManyAccountArgsFromProjectFileRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromProjectFileRecursive4']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromProjectFileRecursive4']
    projects: Union[bool, 'FindManyProjectArgsFromProjectFileRecursive4']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromProjectFileRecursive4']
    posts: Union[bool, 'FindManyPostArgsFromProjectFileRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromProjectFileRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromProjectFileRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromProjectFileRecursive4']


class UserIncludeFromProjectFileRecursive4(TypedDict, total=False):
    """Relational arguments for ProjectFile"""

    

class UserArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    
    

class FindManyUserArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromProjectFile(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive1']


class AccountIncludeFromProjectFileRecursive1(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive2']


class AccountIncludeFromProjectFileRecursive2(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive3']


class AccountIncludeFromProjectFileRecursive3(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive4']


class AccountIncludeFromProjectFileRecursive4(TypedDict, total=False):
    """Relational arguments for ProjectFile"""

    

class AccountArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    
    

class FindManyAccountArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromProjectFile(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive1']


class SessionIncludeFromProjectFileRecursive1(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive2']


class SessionIncludeFromProjectFileRecursive2(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive3']


class SessionIncludeFromProjectFileRecursive3(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive4']


class SessionIncludeFromProjectFileRecursive4(TypedDict, total=False):
    """Relational arguments for ProjectFile"""

    

class SessionArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    
    

class FindManySessionArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromProjectFile(TypedDict, total=False):
    """Relational arguments for ProjectFile"""


class VerificationTokenIncludeFromProjectFileRecursive1(TypedDict, total=False):
    """Relational arguments for ProjectFile"""


class VerificationTokenIncludeFromProjectFileRecursive2(TypedDict, total=False):
    """Relational arguments for ProjectFile"""


class VerificationTokenIncludeFromProjectFileRecursive3(TypedDict, total=False):
    """Relational arguments for ProjectFile"""


class VerificationTokenIncludeFromProjectFileRecursive4(TypedDict, total=False):
    """Relational arguments for ProjectFile"""

    

class VerificationTokenArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    
    

class FindManyVerificationTokenArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class PasswordResetTokenIncludeFromProjectFile(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive1']


class PasswordResetTokenIncludeFromProjectFileRecursive1(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive2']


class PasswordResetTokenIncludeFromProjectFileRecursive2(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive3']


class PasswordResetTokenIncludeFromProjectFileRecursive3(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive4']


class PasswordResetTokenIncludeFromProjectFileRecursive4(TypedDict, total=False):
    """Relational arguments for ProjectFile"""

    

class PasswordResetTokenArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class PasswordResetTokenArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class PasswordResetTokenArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class PasswordResetTokenArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class PasswordResetTokenArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    
    

class FindManyPasswordResetTokenArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class FindManyPasswordResetTokenArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class FindManyPasswordResetTokenArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class FindManyPasswordResetTokenArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class FindManyPasswordResetTokenArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    
    

class ProjectIncludeFromProjectFile(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    owner: Union[bool, 'UserArgsFromProjectFileRecursive1']
    files: Union[bool, 'FindManyProjectFileArgsFromProjectFileRecursive1']


class ProjectIncludeFromProjectFileRecursive1(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    owner: Union[bool, 'UserArgsFromProjectFileRecursive2']
    files: Union[bool, 'FindManyProjectFileArgsFromProjectFileRecursive2']


class ProjectIncludeFromProjectFileRecursive2(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    owner: Union[bool, 'UserArgsFromProjectFileRecursive3']
    files: Union[bool, 'FindManyProjectFileArgsFromProjectFileRecursive3']


class ProjectIncludeFromProjectFileRecursive3(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    owner: Union[bool, 'UserArgsFromProjectFileRecursive4']
    files: Union[bool, 'FindManyProjectFileArgsFromProjectFileRecursive4']


class ProjectIncludeFromProjectFileRecursive4(TypedDict, total=False):
    """Relational arguments for ProjectFile"""

    

class ProjectArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    
    

class FindManyProjectArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class ProjectFileIncludeFromProjectFile(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    project: Union[bool, 'ProjectArgsFromProjectFileRecursive1']
    uploadedBy: Union[bool, 'UserArgsFromProjectFileRecursive1']


class ProjectFileIncludeFromProjectFileRecursive1(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    project: Union[bool, 'ProjectArgsFromProjectFileRecursive2']
    uploadedBy: Union[bool, 'UserArgsFromProjectFileRecursive2']


class ProjectFileIncludeFromProjectFileRecursive2(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    project: Union[bool, 'ProjectArgsFromProjectFileRecursive3']
    uploadedBy: Union[bool, 'UserArgsFromProjectFileRecursive3']


class ProjectFileIncludeFromProjectFileRecursive3(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    project: Union[bool, 'ProjectArgsFromProjectFileRecursive4']
    uploadedBy: Union[bool, 'UserArgsFromProjectFileRecursive4']


class ProjectFileIncludeFromProjectFileRecursive4(TypedDict, total=False):
    """Relational arguments for ProjectFile"""

    

class ProjectFileArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class ProjectFileArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class ProjectFileArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class ProjectFileArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class ProjectFileArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    
    

class FindManyProjectFileArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class FindManyProjectFileArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class FindManyProjectFileArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class FindManyProjectFileArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class FindManyProjectFileArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    
    

class PostIncludeFromProjectFile(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    author: Union[bool, 'UserArgsFromProjectFileRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromProjectFileRecursive1']


class PostIncludeFromProjectFileRecursive1(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    author: Union[bool, 'UserArgsFromProjectFileRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromProjectFileRecursive2']


class PostIncludeFromProjectFileRecursive2(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    author: Union[bool, 'UserArgsFromProjectFileRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromProjectFileRecursive3']


class PostIncludeFromProjectFileRecursive3(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    author: Union[bool, 'UserArgsFromProjectFileRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromProjectFileRecursive4']


class PostIncludeFromProjectFileRecursive4(TypedDict, total=False):
    """Relational arguments for ProjectFile"""

    

class PostArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    
    

class FindManyPostArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class LikeIncludeFromProjectFile(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive1']
    post: Union[bool, 'PostArgsFromProjectFileRecursive1']


class LikeIncludeFromProjectFileRecursive1(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive2']
    post: Union[bool, 'PostArgsFromProjectFileRecursive2']


class LikeIncludeFromProjectFileRecursive2(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive3']
    post: Union[bool, 'PostArgsFromProjectFileRecursive3']


class LikeIncludeFromProjectFileRecursive3(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    user: Union[bool, 'UserArgsFromProjectFileRecursive4']
    post: Union[bool, 'PostArgsFromProjectFileRecursive4']


class LikeIncludeFromProjectFileRecursive4(TypedDict, total=False):
    """Relational arguments for ProjectFile"""

    

class LikeArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    
    

class FindManyLikeArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class FollowIncludeFromProjectFile(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    follower: Union[bool, 'UserArgsFromProjectFileRecursive1']
    following: Union[bool, 'UserArgsFromProjectFileRecursive1']


class FollowIncludeFromProjectFileRecursive1(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    follower: Union[bool, 'UserArgsFromProjectFileRecursive2']
    following: Union[bool, 'UserArgsFromProjectFileRecursive2']


class FollowIncludeFromProjectFileRecursive2(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    follower: Union[bool, 'UserArgsFromProjectFileRecursive3']
    following: Union[bool, 'UserArgsFromProjectFileRecursive3']


class FollowIncludeFromProjectFileRecursive3(TypedDict, total=False):
    """Relational arguments for ProjectFile"""
    follower: Union[bool, 'UserArgsFromProjectFileRecursive4']
    following: Union[bool, 'UserArgsFromProjectFileRecursive4']


class FollowIncludeFromProjectFileRecursive4(TypedDict, total=False):
    """Relational arguments for ProjectFile"""

    

class FollowArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    
    

class FindManyFollowArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    
    

class SecurityAuditLogIncludeFromProjectFile(TypedDict, total=False):
    """Relational arguments for ProjectFile"""


class SecurityAuditLogIncludeFromProjectFileRecursive1(TypedDict, total=False):
    """Relational arguments for ProjectFile"""


class SecurityAuditLogIncludeFromProjectFileRecursive2(TypedDict, total=False):
    """Relational arguments for ProjectFile"""


class SecurityAuditLogIncludeFromProjectFileRecursive3(TypedDict, total=False):
    """Relational arguments for ProjectFile"""


class SecurityAuditLogIncludeFromProjectFileRecursive4(TypedDict, total=False):
    """Relational arguments for ProjectFile"""

    

class SecurityAuditLogArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class SecurityAuditLogArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class SecurityAuditLogArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class SecurityAuditLogArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class SecurityAuditLogArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    
    

class FindManySecurityAuditLogArgsFromProjectFile(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class FindManySecurityAuditLogArgsFromProjectFileRecursive1(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class FindManySecurityAuditLogArgsFromProjectFileRecursive2(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class FindManySecurityAuditLogArgsFromProjectFileRecursive3(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class FindManySecurityAuditLogArgsFromProjectFileRecursive4(TypedDict, total=False):
    """Arguments for ProjectFile"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    


FindManyProjectFileArgs = FindManyProjectFileArgsFromProjectFile
FindFirstProjectFileArgs = FindManyProjectFileArgsFromProjectFile


    

class ProjectFileWhereInput(TypedDict, total=False):
    """ProjectFile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    project: 'ProjectRelationFilter'
    projectId: Union[_str, 'types.StringFilter']
    fileName: Union[_str, 'types.StringFilter']
    appwriteId: Union[_str, 'types.StringFilter']
    fileSize: Union[_int, 'types.IntFilter']
    mimeType: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    isPublic: Union[_bool, 'types.BooleanFilter']
    uploadedBy: 'UserRelationFilter'
    uploadedById: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ProjectFileWhereInputRecursive1', List['ProjectFileWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ProjectFileWhereInputRecursive1']
    OR: List['ProjectFileWhereInputRecursive1']
    NOT: List['ProjectFileWhereInputRecursive1']


class ProjectFileWhereInputRecursive1(TypedDict, total=False):
    """ProjectFile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    project: 'ProjectRelationFilter'
    projectId: Union[_str, 'types.StringFilter']
    fileName: Union[_str, 'types.StringFilter']
    appwriteId: Union[_str, 'types.StringFilter']
    fileSize: Union[_int, 'types.IntFilter']
    mimeType: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    isPublic: Union[_bool, 'types.BooleanFilter']
    uploadedBy: 'UserRelationFilter'
    uploadedById: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ProjectFileWhereInputRecursive2', List['ProjectFileWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ProjectFileWhereInputRecursive2']
    OR: List['ProjectFileWhereInputRecursive2']
    NOT: List['ProjectFileWhereInputRecursive2']


class ProjectFileWhereInputRecursive2(TypedDict, total=False):
    """ProjectFile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    project: 'ProjectRelationFilter'
    projectId: Union[_str, 'types.StringFilter']
    fileName: Union[_str, 'types.StringFilter']
    appwriteId: Union[_str, 'types.StringFilter']
    fileSize: Union[_int, 'types.IntFilter']
    mimeType: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    isPublic: Union[_bool, 'types.BooleanFilter']
    uploadedBy: 'UserRelationFilter'
    uploadedById: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ProjectFileWhereInputRecursive3', List['ProjectFileWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ProjectFileWhereInputRecursive3']
    OR: List['ProjectFileWhereInputRecursive3']
    NOT: List['ProjectFileWhereInputRecursive3']


class ProjectFileWhereInputRecursive3(TypedDict, total=False):
    """ProjectFile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    project: 'ProjectRelationFilter'
    projectId: Union[_str, 'types.StringFilter']
    fileName: Union[_str, 'types.StringFilter']
    appwriteId: Union[_str, 'types.StringFilter']
    fileSize: Union[_int, 'types.IntFilter']
    mimeType: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    isPublic: Union[_bool, 'types.BooleanFilter']
    uploadedBy: 'UserRelationFilter'
    uploadedById: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ProjectFileWhereInputRecursive4', List['ProjectFileWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ProjectFileWhereInputRecursive4']
    OR: List['ProjectFileWhereInputRecursive4']
    NOT: List['ProjectFileWhereInputRecursive4']


class ProjectFileWhereInputRecursive4(TypedDict, total=False):
    """ProjectFile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    project: 'ProjectRelationFilter'
    projectId: Union[_str, 'types.StringFilter']
    fileName: Union[_str, 'types.StringFilter']
    appwriteId: Union[_str, 'types.StringFilter']
    fileSize: Union[_int, 'types.IntFilter']
    mimeType: Union[_str, 'types.StringFilter']
    fileUrl: Union[None, _str, 'types.StringFilter']
    isPublic: Union[_bool, 'types.BooleanFilter']
    uploadedBy: 'UserRelationFilter'
    uploadedById: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate ProjectFile types


    

class ProjectFileScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ProjectFile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    projectId: Union[_str, 'types.StringWithAggregatesFilter']
    fileName: Union[_str, 'types.StringWithAggregatesFilter']
    appwriteId: Union[_str, 'types.StringWithAggregatesFilter']
    fileSize: Union[_int, 'types.IntWithAggregatesFilter']
    mimeType: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isPublic: Union[_bool, 'types.BooleanWithAggregatesFilter']
    uploadedById: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProjectFileScalarWhereWithAggregatesInputRecursive1']
    OR: List['ProjectFileScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ProjectFileScalarWhereWithAggregatesInputRecursive1']


class ProjectFileScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """ProjectFile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    projectId: Union[_str, 'types.StringWithAggregatesFilter']
    fileName: Union[_str, 'types.StringWithAggregatesFilter']
    appwriteId: Union[_str, 'types.StringWithAggregatesFilter']
    fileSize: Union[_int, 'types.IntWithAggregatesFilter']
    mimeType: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isPublic: Union[_bool, 'types.BooleanWithAggregatesFilter']
    uploadedById: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProjectFileScalarWhereWithAggregatesInputRecursive2']
    OR: List['ProjectFileScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ProjectFileScalarWhereWithAggregatesInputRecursive2']


class ProjectFileScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """ProjectFile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    projectId: Union[_str, 'types.StringWithAggregatesFilter']
    fileName: Union[_str, 'types.StringWithAggregatesFilter']
    appwriteId: Union[_str, 'types.StringWithAggregatesFilter']
    fileSize: Union[_int, 'types.IntWithAggregatesFilter']
    mimeType: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isPublic: Union[_bool, 'types.BooleanWithAggregatesFilter']
    uploadedById: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProjectFileScalarWhereWithAggregatesInputRecursive3']
    OR: List['ProjectFileScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ProjectFileScalarWhereWithAggregatesInputRecursive3']


class ProjectFileScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """ProjectFile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    projectId: Union[_str, 'types.StringWithAggregatesFilter']
    fileName: Union[_str, 'types.StringWithAggregatesFilter']
    appwriteId: Union[_str, 'types.StringWithAggregatesFilter']
    fileSize: Union[_int, 'types.IntWithAggregatesFilter']
    mimeType: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isPublic: Union[_bool, 'types.BooleanWithAggregatesFilter']
    uploadedById: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ProjectFileScalarWhereWithAggregatesInputRecursive4']
    OR: List['ProjectFileScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ProjectFileScalarWhereWithAggregatesInputRecursive4']


class ProjectFileScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """ProjectFile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    projectId: Union[_str, 'types.StringWithAggregatesFilter']
    fileName: Union[_str, 'types.StringWithAggregatesFilter']
    appwriteId: Union[_str, 'types.StringWithAggregatesFilter']
    fileSize: Union[_int, 'types.IntWithAggregatesFilter']
    mimeType: Union[_str, 'types.StringWithAggregatesFilter']
    fileUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isPublic: Union[_bool, 'types.BooleanWithAggregatesFilter']
    uploadedById: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class ProjectFileGroupByOutput(TypedDict, total=False):
    id: _str
    projectId: _str
    fileName: _str
    appwriteId: _str
    fileSize: _int
    mimeType: _str
    fileUrl: _str
    isPublic: _bool
    uploadedById: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ProjectFileSumAggregateOutput'
    _avg: 'ProjectFileAvgAggregateOutput'
    _min: 'ProjectFileMinAggregateOutput'
    _max: 'ProjectFileMaxAggregateOutput'
    _count: 'ProjectFileCountAggregateOutput'


class ProjectFileAvgAggregateOutput(TypedDict, total=False):
    """ProjectFile output for aggregating averages"""
    fileSize: float


class ProjectFileSumAggregateOutput(TypedDict, total=False):
    """ProjectFile output for aggregating sums"""
    fileSize: _int


class ProjectFileScalarAggregateOutput(TypedDict, total=False):
    """ProjectFile output including scalar fields"""
    id: _str
    projectId: _str
    fileName: _str
    appwriteId: _str
    fileSize: _int
    mimeType: _str
    fileUrl: _str
    isPublic: _bool
    uploadedById: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ProjectFileMinAggregateOutput = ProjectFileScalarAggregateOutput
ProjectFileMaxAggregateOutput = ProjectFileScalarAggregateOutput


class ProjectFileMaxAggregateInput(TypedDict, total=False):
    """ProjectFile input for aggregating by max"""
    id: bool
    projectId: bool
    fileName: bool
    appwriteId: bool
    fileSize: bool
    mimeType: bool
    fileUrl: bool
    isPublic: bool
    uploadedById: bool
    createdAt: bool
    updatedAt: bool


class ProjectFileMinAggregateInput(TypedDict, total=False):
    """ProjectFile input for aggregating by min"""
    id: bool
    projectId: bool
    fileName: bool
    appwriteId: bool
    fileSize: bool
    mimeType: bool
    fileUrl: bool
    isPublic: bool
    uploadedById: bool
    createdAt: bool
    updatedAt: bool


class ProjectFileNumberAggregateInput(TypedDict, total=False):
    """ProjectFile input for aggregating numbers"""
    fileSize: bool


ProjectFileAvgAggregateInput = ProjectFileNumberAggregateInput
ProjectFileSumAggregateInput = ProjectFileNumberAggregateInput


ProjectFileCountAggregateInput = TypedDict(
    'ProjectFileCountAggregateInput',
    {
        'id': bool,
        'projectId': bool,
        'fileName': bool,
        'appwriteId': bool,
        'fileSize': bool,
        'mimeType': bool,
        'fileUrl': bool,
        'isPublic': bool,
        'uploadedById': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ProjectFileCountAggregateOutput = TypedDict(
    'ProjectFileCountAggregateOutput',
    {
        'id': int,
        'projectId': int,
        'fileName': int,
        'appwriteId': int,
        'fileSize': int,
        'mimeType': int,
        'fileUrl': int,
        'isPublic': int,
        'uploadedById': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ProjectFileKeys = Literal[
    'id',
    'project',
    'projectId',
    'fileName',
    'appwriteId',
    'fileSize',
    'mimeType',
    'fileUrl',
    'isPublic',
    'uploadedBy',
    'uploadedById',
    'createdAt',
    'updatedAt',
]
ProjectFileScalarFieldKeys = Literal[
    'id',
    'projectId',
    'fileName',
    'appwriteId',
    'fileSize',
    'mimeType',
    'fileUrl',
    'isPublic',
    'uploadedById',
    'createdAt',
    'updatedAt',
]
ProjectFileScalarFieldKeysT = TypeVar('ProjectFileScalarFieldKeysT', bound=ProjectFileScalarFieldKeys)

ProjectFileRelationalFieldKeys = Literal[
        'project',
        'uploadedBy',
    ]

# Post types

class PostOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Post create method"""
    id: _str
    description: Optional[_str]
    tags: List[_str]
    feature: _bool
    author: 'UserCreateNestedWithoutRelationsInput'
    authorId: _str
    likes: 'LikeCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PostCreateInput(PostOptionalCreateInput):
    """Required arguments to the Post create method"""
    title: _str
    markdown: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PostOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Post create method, without relations"""
    id: _str
    description: Optional[_str]
    tags: List[_str]
    feature: _bool
    authorId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PostCreateWithoutRelationsInput(PostOptionalCreateWithoutRelationsInput):
    """Required arguments to the Post create method, without relations"""
    title: _str
    markdown: _str

class PostConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PostCreateWithoutRelationsInput'
    where: 'PostWhereUniqueInput'

class PostCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'
    connect_or_create: 'PostConnectOrCreateWithoutRelationsInput'


class PostCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PostCreateWithoutRelationsInput', List['PostCreateWithoutRelationsInput']]
    connect: Union['PostWhereUniqueInput', List['PostWhereUniqueInput']]
    connect_or_create: Union['PostConnectOrCreateWithoutRelationsInput', List['PostConnectOrCreateWithoutRelationsInput']]

_PostWhereUnique_id_Input = TypedDict(
    '_PostWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

PostWhereUniqueInput = _PostWhereUnique_id_Input


class PostUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    description: Optional[_str]
    markdown: _str
    tags: 'types.StringListUpdate'
    feature: _bool
    author: 'UserUpdateOneWithoutRelationsInput'
    likes: 'LikeUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PostUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    description: Optional[_str]
    markdown: _str
    tags: 'types.StringListUpdate'
    feature: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PostUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PostCreateWithoutRelationsInput']
    connect: List['PostWhereUniqueInput']
    connect_or_create: List['PostConnectOrCreateWithoutRelationsInput']
    set: List['PostWhereUniqueInput']
    disconnect: List['PostWhereUniqueInput']
    delete: List['PostWhereUniqueInput']

    # TODO
    # update: List['PostUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PostUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PostScalarWhereInput']
    # upsert: List['PostUpserteWithWhereUniqueWithoutRelationsInput']


class PostUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'
    connect_or_create: 'PostConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PostUpdateInput'
    # upsert: 'PostUpsertWithoutRelationsInput'


class PostUpsertInput(TypedDict):
    create: 'PostCreateInput'
    update: 'PostUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Post_id_OrderByInput = TypedDict(
    '_Post_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Post_title_OrderByInput = TypedDict(
    '_Post_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Post_description_OrderByInput = TypedDict(
    '_Post_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Post_markdown_OrderByInput = TypedDict(
    '_Post_markdown_OrderByInput',
    {
        'markdown': 'SortOrder',
    },
    total=True
)

_Post_tags_OrderByInput = TypedDict(
    '_Post_tags_OrderByInput',
    {
        'tags': 'SortOrder',
    },
    total=True
)

_Post_feature_OrderByInput = TypedDict(
    '_Post_feature_OrderByInput',
    {
        'feature': 'SortOrder',
    },
    total=True
)

_Post_authorId_OrderByInput = TypedDict(
    '_Post_authorId_OrderByInput',
    {
        'authorId': 'SortOrder',
    },
    total=True
)

_Post_createdAt_OrderByInput = TypedDict(
    '_Post_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Post_updatedAt_OrderByInput = TypedDict(
    '_Post_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Post_RelevanceInner = TypedDict(
    '_Post_RelevanceInner',
    {
        'fields': 'List[PostScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Post_RelevanceOrderByInput = TypedDict(
    '_Post_RelevanceOrderByInput',
    {
        '_relevance': '_Post_RelevanceInner',
    },
    total=True
)

PostOrderByInput = Union[
    '_Post_id_OrderByInput',
    '_Post_title_OrderByInput',
    '_Post_description_OrderByInput',
    '_Post_markdown_OrderByInput',
    '_Post_tags_OrderByInput',
    '_Post_feature_OrderByInput',
    '_Post_authorId_OrderByInput',
    '_Post_createdAt_OrderByInput',
    '_Post_updatedAt_OrderByInput',
    '_Post_RelevanceOrderByInput',
]



# recursive Post types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PostRelationFilter = TypedDict(
    'PostRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PostListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PostInclude(TypedDict, total=False):
    """Post relational arguments"""
    author: Union[bool, 'UserArgsFromPost']
    likes: Union[bool, 'FindManyLikeArgsFromPost']


    

class UserIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    accounts: Union[bool, 'FindManyAccountArgsFromPostRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromPostRecursive1']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromPostRecursive1']
    projects: Union[bool, 'FindManyProjectArgsFromPostRecursive1']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromPostRecursive1']
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromPostRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromPostRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromPostRecursive1']


class UserIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    accounts: Union[bool, 'FindManyAccountArgsFromPostRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromPostRecursive2']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromPostRecursive2']
    projects: Union[bool, 'FindManyProjectArgsFromPostRecursive2']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromPostRecursive2']
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromPostRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromPostRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromPostRecursive2']


class UserIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    accounts: Union[bool, 'FindManyAccountArgsFromPostRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromPostRecursive3']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromPostRecursive3']
    projects: Union[bool, 'FindManyProjectArgsFromPostRecursive3']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromPostRecursive3']
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromPostRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromPostRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromPostRecursive3']


class UserIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    accounts: Union[bool, 'FindManyAccountArgsFromPostRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromPostRecursive4']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromPostRecursive4']
    projects: Union[bool, 'FindManyProjectArgsFromPostRecursive4']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromPostRecursive4']
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromPostRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromPostRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromPostRecursive4']


class UserIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class UserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyUserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive1']


class AccountIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive2']


class AccountIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive3']


class AccountIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive4']


class AccountIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class AccountArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyAccountArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive1']


class SessionIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive2']


class SessionIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive3']


class SessionIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive4']


class SessionIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class SessionArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManySessionArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""


class VerificationTokenIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""


class VerificationTokenIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""


class VerificationTokenIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""


class VerificationTokenIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class VerificationTokenArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyVerificationTokenArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class PasswordResetTokenIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive1']


class PasswordResetTokenIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive2']


class PasswordResetTokenIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive3']


class PasswordResetTokenIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive4']


class PasswordResetTokenIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class PasswordResetTokenArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class PasswordResetTokenArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class PasswordResetTokenArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class PasswordResetTokenArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class PasswordResetTokenArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyPasswordResetTokenArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class FindManyPasswordResetTokenArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class FindManyPasswordResetTokenArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class FindManyPasswordResetTokenArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class FindManyPasswordResetTokenArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    
    

class ProjectIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    owner: Union[bool, 'UserArgsFromPostRecursive1']
    files: Union[bool, 'FindManyProjectFileArgsFromPostRecursive1']


class ProjectIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    owner: Union[bool, 'UserArgsFromPostRecursive2']
    files: Union[bool, 'FindManyProjectFileArgsFromPostRecursive2']


class ProjectIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    owner: Union[bool, 'UserArgsFromPostRecursive3']
    files: Union[bool, 'FindManyProjectFileArgsFromPostRecursive3']


class ProjectIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    owner: Union[bool, 'UserArgsFromPostRecursive4']
    files: Union[bool, 'FindManyProjectFileArgsFromPostRecursive4']


class ProjectIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class ProjectArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyProjectArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class ProjectFileIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    project: Union[bool, 'ProjectArgsFromPostRecursive1']
    uploadedBy: Union[bool, 'UserArgsFromPostRecursive1']


class ProjectFileIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    project: Union[bool, 'ProjectArgsFromPostRecursive2']
    uploadedBy: Union[bool, 'UserArgsFromPostRecursive2']


class ProjectFileIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    project: Union[bool, 'ProjectArgsFromPostRecursive3']
    uploadedBy: Union[bool, 'UserArgsFromPostRecursive3']


class ProjectFileIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    project: Union[bool, 'ProjectArgsFromPostRecursive4']
    uploadedBy: Union[bool, 'UserArgsFromPostRecursive4']


class ProjectFileIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class ProjectFileArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class ProjectFileArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class ProjectFileArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class ProjectFileArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class ProjectFileArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyProjectFileArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class FindManyProjectFileArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class FindManyProjectFileArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class FindManyProjectFileArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class FindManyProjectFileArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    
    

class PostIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromPostRecursive1']


class PostIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromPostRecursive2']


class PostIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromPostRecursive3']


class PostIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromPostRecursive4']


class PostIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class PostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyPostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class LikeIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive1']
    post: Union[bool, 'PostArgsFromPostRecursive1']


class LikeIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive2']
    post: Union[bool, 'PostArgsFromPostRecursive2']


class LikeIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive3']
    post: Union[bool, 'PostArgsFromPostRecursive3']


class LikeIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive4']
    post: Union[bool, 'PostArgsFromPostRecursive4']


class LikeIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class LikeArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyLikeArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class FollowIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    follower: Union[bool, 'UserArgsFromPostRecursive1']
    following: Union[bool, 'UserArgsFromPostRecursive1']


class FollowIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    follower: Union[bool, 'UserArgsFromPostRecursive2']
    following: Union[bool, 'UserArgsFromPostRecursive2']


class FollowIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    follower: Union[bool, 'UserArgsFromPostRecursive3']
    following: Union[bool, 'UserArgsFromPostRecursive3']


class FollowIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    follower: Union[bool, 'UserArgsFromPostRecursive4']
    following: Union[bool, 'UserArgsFromPostRecursive4']


class FollowIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class FollowArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyFollowArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    
    

class SecurityAuditLogIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""


class SecurityAuditLogIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""


class SecurityAuditLogIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""


class SecurityAuditLogIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""


class SecurityAuditLogIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class SecurityAuditLogArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class SecurityAuditLogArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class SecurityAuditLogArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class SecurityAuditLogArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class SecurityAuditLogArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManySecurityAuditLogArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class FindManySecurityAuditLogArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class FindManySecurityAuditLogArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class FindManySecurityAuditLogArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class FindManySecurityAuditLogArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    


FindManyPostArgs = FindManyPostArgsFromPost
FindFirstPostArgs = FindManyPostArgsFromPost


    

class PostWhereInput(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    markdown: Union[_str, 'types.StringFilter']
    tags: 'types.StringListFilter'
    feature: Union[_bool, 'types.BooleanFilter']
    author: 'UserRelationFilter'
    authorId: Union[_str, 'types.StringFilter']
    likes: 'LikeListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive1', List['PostWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive1']
    OR: List['PostWhereInputRecursive1']
    NOT: List['PostWhereInputRecursive1']


class PostWhereInputRecursive1(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    markdown: Union[_str, 'types.StringFilter']
    tags: 'types.StringListFilter'
    feature: Union[_bool, 'types.BooleanFilter']
    author: 'UserRelationFilter'
    authorId: Union[_str, 'types.StringFilter']
    likes: 'LikeListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive2', List['PostWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive2']
    OR: List['PostWhereInputRecursive2']
    NOT: List['PostWhereInputRecursive2']


class PostWhereInputRecursive2(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    markdown: Union[_str, 'types.StringFilter']
    tags: 'types.StringListFilter'
    feature: Union[_bool, 'types.BooleanFilter']
    author: 'UserRelationFilter'
    authorId: Union[_str, 'types.StringFilter']
    likes: 'LikeListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive3', List['PostWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive3']
    OR: List['PostWhereInputRecursive3']
    NOT: List['PostWhereInputRecursive3']


class PostWhereInputRecursive3(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    markdown: Union[_str, 'types.StringFilter']
    tags: 'types.StringListFilter'
    feature: Union[_bool, 'types.BooleanFilter']
    author: 'UserRelationFilter'
    authorId: Union[_str, 'types.StringFilter']
    likes: 'LikeListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PostWhereInputRecursive4', List['PostWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PostWhereInputRecursive4']
    OR: List['PostWhereInputRecursive4']
    NOT: List['PostWhereInputRecursive4']


class PostWhereInputRecursive4(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    markdown: Union[_str, 'types.StringFilter']
    tags: 'types.StringListFilter'
    feature: Union[_bool, 'types.BooleanFilter']
    author: 'UserRelationFilter'
    authorId: Union[_str, 'types.StringFilter']
    likes: 'LikeListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Post types


    

class PostScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    markdown: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    feature: Union[_bool, 'types.BooleanWithAggregatesFilter']
    authorId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive1']
    OR: List['PostScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive1']


class PostScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    markdown: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    feature: Union[_bool, 'types.BooleanWithAggregatesFilter']
    authorId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive2']
    OR: List['PostScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive2']


class PostScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    markdown: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    feature: Union[_bool, 'types.BooleanWithAggregatesFilter']
    authorId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive3']
    OR: List['PostScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive3']


class PostScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    markdown: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    feature: Union[_bool, 'types.BooleanWithAggregatesFilter']
    authorId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PostScalarWhereWithAggregatesInputRecursive4']
    OR: List['PostScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PostScalarWhereWithAggregatesInputRecursive4']


class PostScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    markdown: Union[_str, 'types.StringWithAggregatesFilter']
    tags: Union[_str, 'types.StringWithAggregatesFilter']
    feature: Union[_bool, 'types.BooleanWithAggregatesFilter']
    authorId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class PostGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    description: _str
    markdown: _str
    tags: List[_str]
    feature: _bool
    authorId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PostSumAggregateOutput'
    _avg: 'PostAvgAggregateOutput'
    _min: 'PostMinAggregateOutput'
    _max: 'PostMaxAggregateOutput'
    _count: 'PostCountAggregateOutput'


class PostAvgAggregateOutput(TypedDict, total=False):
    """Post output for aggregating averages"""


class PostSumAggregateOutput(TypedDict, total=False):
    """Post output for aggregating sums"""


class PostScalarAggregateOutput(TypedDict, total=False):
    """Post output including scalar fields"""
    id: _str
    title: _str
    description: _str
    markdown: _str
    tags: List[_str]
    feature: _bool
    authorId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PostMinAggregateOutput = PostScalarAggregateOutput
PostMaxAggregateOutput = PostScalarAggregateOutput


class PostMaxAggregateInput(TypedDict, total=False):
    """Post input for aggregating by max"""
    id: bool
    title: bool
    description: bool
    markdown: bool
    tags: bool
    feature: bool
    authorId: bool
    createdAt: bool
    updatedAt: bool


class PostMinAggregateInput(TypedDict, total=False):
    """Post input for aggregating by min"""
    id: bool
    title: bool
    description: bool
    markdown: bool
    tags: bool
    feature: bool
    authorId: bool
    createdAt: bool
    updatedAt: bool


class PostNumberAggregateInput(TypedDict, total=False):
    """Post input for aggregating numbers"""


PostAvgAggregateInput = PostNumberAggregateInput
PostSumAggregateInput = PostNumberAggregateInput


PostCountAggregateInput = TypedDict(
    'PostCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'description': bool,
        'markdown': bool,
        'tags': bool,
        'feature': bool,
        'authorId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PostCountAggregateOutput = TypedDict(
    'PostCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'description': int,
        'markdown': int,
        'tags': int,
        'feature': int,
        'authorId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PostKeys = Literal[
    'id',
    'title',
    'description',
    'markdown',
    'tags',
    'feature',
    'author',
    'authorId',
    'likes',
    'createdAt',
    'updatedAt',
]
PostScalarFieldKeys = Literal[
    'id',
    'title',
    'description',
    'markdown',
    'tags',
    'feature',
    'authorId',
    'createdAt',
    'updatedAt',
]
PostScalarFieldKeysT = TypeVar('PostScalarFieldKeysT', bound=PostScalarFieldKeys)

PostRelationalFieldKeys = Literal[
        'author',
        'likes',
    ]

# Like types

class LikeOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Like create method"""
    id: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    userId: _str
    post: 'PostCreateNestedWithoutRelationsInput'
    postId: _str
    createdAt: datetime.datetime


class LikeCreateInput(LikeOptionalCreateInput):
    """Required arguments to the Like create method"""
    value: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LikeOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Like create method, without relations"""
    id: _str
    userId: _str
    postId: _str
    createdAt: datetime.datetime


class LikeCreateWithoutRelationsInput(LikeOptionalCreateWithoutRelationsInput):
    """Required arguments to the Like create method, without relations"""
    value: _int

class LikeConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'LikeCreateWithoutRelationsInput'
    where: 'LikeWhereUniqueInput'

class LikeCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LikeCreateWithoutRelationsInput'
    connect: 'LikeWhereUniqueInput'
    connect_or_create: 'LikeConnectOrCreateWithoutRelationsInput'


class LikeCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LikeCreateWithoutRelationsInput', List['LikeCreateWithoutRelationsInput']]
    connect: Union['LikeWhereUniqueInput', List['LikeWhereUniqueInput']]
    connect_or_create: Union['LikeConnectOrCreateWithoutRelationsInput', List['LikeConnectOrCreateWithoutRelationsInput']]

_LikeWhereUnique_id_Input = TypedDict(
    '_LikeWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_LikeCompounduserId_postIdKeyInner = TypedDict(
    '_LikeCompounduserId_postIdKeyInner',
    {
        'userId': '_str',
        'postId': '_str',
    },
    total=True
)

_LikeCompounduserId_postIdKey = TypedDict(
    '_LikeCompounduserId_postIdKey',
    {
        'userId_postId': '_LikeCompounduserId_postIdKeyInner',
    },
    total=True
)

LikeWhereUniqueInput = Union[
    '_LikeWhereUnique_id_Input',
    '_LikeCompounduserId_postIdKey',
]


class LikeUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    post: 'PostUpdateOneWithoutRelationsInput'
    value: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime


class LikeUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    value: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime


class LikeUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LikeCreateWithoutRelationsInput']
    connect: List['LikeWhereUniqueInput']
    connect_or_create: List['LikeConnectOrCreateWithoutRelationsInput']
    set: List['LikeWhereUniqueInput']
    disconnect: List['LikeWhereUniqueInput']
    delete: List['LikeWhereUniqueInput']

    # TODO
    # update: List['LikeUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LikeUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LikeScalarWhereInput']
    # upsert: List['LikeUpserteWithWhereUniqueWithoutRelationsInput']


class LikeUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LikeCreateWithoutRelationsInput'
    connect: 'LikeWhereUniqueInput'
    connect_or_create: 'LikeConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LikeUpdateInput'
    # upsert: 'LikeUpsertWithoutRelationsInput'


class LikeUpsertInput(TypedDict):
    create: 'LikeCreateInput'
    update: 'LikeUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Like_id_OrderByInput = TypedDict(
    '_Like_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Like_userId_OrderByInput = TypedDict(
    '_Like_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Like_postId_OrderByInput = TypedDict(
    '_Like_postId_OrderByInput',
    {
        'postId': 'SortOrder',
    },
    total=True
)

_Like_value_OrderByInput = TypedDict(
    '_Like_value_OrderByInput',
    {
        'value': 'SortOrder',
    },
    total=True
)

_Like_createdAt_OrderByInput = TypedDict(
    '_Like_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Like_RelevanceInner = TypedDict(
    '_Like_RelevanceInner',
    {
        'fields': 'List[LikeScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Like_RelevanceOrderByInput = TypedDict(
    '_Like_RelevanceOrderByInput',
    {
        '_relevance': '_Like_RelevanceInner',
    },
    total=True
)

LikeOrderByInput = Union[
    '_Like_id_OrderByInput',
    '_Like_userId_OrderByInput',
    '_Like_postId_OrderByInput',
    '_Like_value_OrderByInput',
    '_Like_createdAt_OrderByInput',
    '_Like_RelevanceOrderByInput',
]



# recursive Like types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

LikeRelationFilter = TypedDict(
    'LikeRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class LikeListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class LikeInclude(TypedDict, total=False):
    """Like relational arguments"""
    user: Union[bool, 'UserArgsFromLike']
    post: Union[bool, 'PostArgsFromLike']


    

class UserIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    accounts: Union[bool, 'FindManyAccountArgsFromLikeRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromLikeRecursive1']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromLikeRecursive1']
    projects: Union[bool, 'FindManyProjectArgsFromLikeRecursive1']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromLikeRecursive1']
    posts: Union[bool, 'FindManyPostArgsFromLikeRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromLikeRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromLikeRecursive1']


class UserIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    accounts: Union[bool, 'FindManyAccountArgsFromLikeRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromLikeRecursive2']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromLikeRecursive2']
    projects: Union[bool, 'FindManyProjectArgsFromLikeRecursive2']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromLikeRecursive2']
    posts: Union[bool, 'FindManyPostArgsFromLikeRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromLikeRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromLikeRecursive2']


class UserIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    accounts: Union[bool, 'FindManyAccountArgsFromLikeRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromLikeRecursive3']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromLikeRecursive3']
    projects: Union[bool, 'FindManyProjectArgsFromLikeRecursive3']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromLikeRecursive3']
    posts: Union[bool, 'FindManyPostArgsFromLikeRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromLikeRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromLikeRecursive3']


class UserIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    accounts: Union[bool, 'FindManyAccountArgsFromLikeRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromLikeRecursive4']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromLikeRecursive4']
    projects: Union[bool, 'FindManyProjectArgsFromLikeRecursive4']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromLikeRecursive4']
    posts: Union[bool, 'FindManyPostArgsFromLikeRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromLikeRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromLikeRecursive4']


class UserIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class UserArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyUserArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive1']


class AccountIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive2']


class AccountIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive3']


class AccountIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive4']


class AccountIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class AccountArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyAccountArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive1']


class SessionIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive2']


class SessionIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive3']


class SessionIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive4']


class SessionIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class SessionArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManySessionArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""


class VerificationTokenIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""


class VerificationTokenIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""


class VerificationTokenIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""


class VerificationTokenIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class VerificationTokenArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyVerificationTokenArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class PasswordResetTokenIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive1']


class PasswordResetTokenIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive2']


class PasswordResetTokenIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive3']


class PasswordResetTokenIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive4']


class PasswordResetTokenIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class PasswordResetTokenArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class PasswordResetTokenArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class PasswordResetTokenArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class PasswordResetTokenArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class PasswordResetTokenArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyPasswordResetTokenArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class FindManyPasswordResetTokenArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class FindManyPasswordResetTokenArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class FindManyPasswordResetTokenArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class FindManyPasswordResetTokenArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    
    

class ProjectIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    owner: Union[bool, 'UserArgsFromLikeRecursive1']
    files: Union[bool, 'FindManyProjectFileArgsFromLikeRecursive1']


class ProjectIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    owner: Union[bool, 'UserArgsFromLikeRecursive2']
    files: Union[bool, 'FindManyProjectFileArgsFromLikeRecursive2']


class ProjectIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    owner: Union[bool, 'UserArgsFromLikeRecursive3']
    files: Union[bool, 'FindManyProjectFileArgsFromLikeRecursive3']


class ProjectIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    owner: Union[bool, 'UserArgsFromLikeRecursive4']
    files: Union[bool, 'FindManyProjectFileArgsFromLikeRecursive4']


class ProjectIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class ProjectArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyProjectArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class ProjectFileIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    project: Union[bool, 'ProjectArgsFromLikeRecursive1']
    uploadedBy: Union[bool, 'UserArgsFromLikeRecursive1']


class ProjectFileIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    project: Union[bool, 'ProjectArgsFromLikeRecursive2']
    uploadedBy: Union[bool, 'UserArgsFromLikeRecursive2']


class ProjectFileIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    project: Union[bool, 'ProjectArgsFromLikeRecursive3']
    uploadedBy: Union[bool, 'UserArgsFromLikeRecursive3']


class ProjectFileIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    project: Union[bool, 'ProjectArgsFromLikeRecursive4']
    uploadedBy: Union[bool, 'UserArgsFromLikeRecursive4']


class ProjectFileIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class ProjectFileArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class ProjectFileArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class ProjectFileArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class ProjectFileArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class ProjectFileArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyProjectFileArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class FindManyProjectFileArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class FindManyProjectFileArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class FindManyProjectFileArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class FindManyProjectFileArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    
    

class PostIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    author: Union[bool, 'UserArgsFromLikeRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive1']


class PostIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    author: Union[bool, 'UserArgsFromLikeRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive2']


class PostIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    author: Union[bool, 'UserArgsFromLikeRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive3']


class PostIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    author: Union[bool, 'UserArgsFromLikeRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromLikeRecursive4']


class PostIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class PostArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyPostArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class LikeIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive1']
    post: Union[bool, 'PostArgsFromLikeRecursive1']


class LikeIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive2']
    post: Union[bool, 'PostArgsFromLikeRecursive2']


class LikeIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive3']
    post: Union[bool, 'PostArgsFromLikeRecursive3']


class LikeIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    user: Union[bool, 'UserArgsFromLikeRecursive4']
    post: Union[bool, 'PostArgsFromLikeRecursive4']


class LikeIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class LikeArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyLikeArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class FollowIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""
    follower: Union[bool, 'UserArgsFromLikeRecursive1']
    following: Union[bool, 'UserArgsFromLikeRecursive1']


class FollowIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""
    follower: Union[bool, 'UserArgsFromLikeRecursive2']
    following: Union[bool, 'UserArgsFromLikeRecursive2']


class FollowIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""
    follower: Union[bool, 'UserArgsFromLikeRecursive3']
    following: Union[bool, 'UserArgsFromLikeRecursive3']


class FollowIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""
    follower: Union[bool, 'UserArgsFromLikeRecursive4']
    following: Union[bool, 'UserArgsFromLikeRecursive4']


class FollowIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class FollowArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManyFollowArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    
    

class SecurityAuditLogIncludeFromLike(TypedDict, total=False):
    """Relational arguments for Like"""


class SecurityAuditLogIncludeFromLikeRecursive1(TypedDict, total=False):
    """Relational arguments for Like"""


class SecurityAuditLogIncludeFromLikeRecursive2(TypedDict, total=False):
    """Relational arguments for Like"""


class SecurityAuditLogIncludeFromLikeRecursive3(TypedDict, total=False):
    """Relational arguments for Like"""


class SecurityAuditLogIncludeFromLikeRecursive4(TypedDict, total=False):
    """Relational arguments for Like"""

    

class SecurityAuditLogArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class SecurityAuditLogArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class SecurityAuditLogArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class SecurityAuditLogArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class SecurityAuditLogArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    
    

class FindManySecurityAuditLogArgsFromLike(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class FindManySecurityAuditLogArgsFromLikeRecursive1(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class FindManySecurityAuditLogArgsFromLikeRecursive2(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class FindManySecurityAuditLogArgsFromLikeRecursive3(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class FindManySecurityAuditLogArgsFromLikeRecursive4(TypedDict, total=False):
    """Arguments for Like"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    


FindManyLikeArgs = FindManyLikeArgsFromLike
FindFirstLikeArgs = FindManyLikeArgsFromLike


    

class LikeWhereInput(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']
    post: 'PostRelationFilter'
    postId: Union[_str, 'types.StringFilter']
    value: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive1', List['LikeWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive1']
    OR: List['LikeWhereInputRecursive1']
    NOT: List['LikeWhereInputRecursive1']


class LikeWhereInputRecursive1(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']
    post: 'PostRelationFilter'
    postId: Union[_str, 'types.StringFilter']
    value: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive2', List['LikeWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive2']
    OR: List['LikeWhereInputRecursive2']
    NOT: List['LikeWhereInputRecursive2']


class LikeWhereInputRecursive2(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']
    post: 'PostRelationFilter'
    postId: Union[_str, 'types.StringFilter']
    value: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive3', List['LikeWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive3']
    OR: List['LikeWhereInputRecursive3']
    NOT: List['LikeWhereInputRecursive3']


class LikeWhereInputRecursive3(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']
    post: 'PostRelationFilter'
    postId: Union[_str, 'types.StringFilter']
    value: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['LikeWhereInputRecursive4', List['LikeWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['LikeWhereInputRecursive4']
    OR: List['LikeWhereInputRecursive4']
    NOT: List['LikeWhereInputRecursive4']


class LikeWhereInputRecursive4(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']
    post: 'PostRelationFilter'
    postId: Union[_str, 'types.StringFilter']
    value: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Like types


    

class LikeScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    value: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive1']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive1']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive1']


class LikeScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    value: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive2']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive2']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive2']


class LikeScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    value: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive3']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive3']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive3']


class LikeScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    value: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LikeScalarWhereWithAggregatesInputRecursive4']
    OR: List['LikeScalarWhereWithAggregatesInputRecursive4']
    NOT: List['LikeScalarWhereWithAggregatesInputRecursive4']


class LikeScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Like arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    value: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class LikeGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    postId: _str
    value: _int
    createdAt: datetime.datetime
    _sum: 'LikeSumAggregateOutput'
    _avg: 'LikeAvgAggregateOutput'
    _min: 'LikeMinAggregateOutput'
    _max: 'LikeMaxAggregateOutput'
    _count: 'LikeCountAggregateOutput'


class LikeAvgAggregateOutput(TypedDict, total=False):
    """Like output for aggregating averages"""
    value: float


class LikeSumAggregateOutput(TypedDict, total=False):
    """Like output for aggregating sums"""
    value: _int


class LikeScalarAggregateOutput(TypedDict, total=False):
    """Like output including scalar fields"""
    id: _str
    userId: _str
    postId: _str
    value: _int
    createdAt: datetime.datetime


LikeMinAggregateOutput = LikeScalarAggregateOutput
LikeMaxAggregateOutput = LikeScalarAggregateOutput


class LikeMaxAggregateInput(TypedDict, total=False):
    """Like input for aggregating by max"""
    id: bool
    userId: bool
    postId: bool
    value: bool
    createdAt: bool


class LikeMinAggregateInput(TypedDict, total=False):
    """Like input for aggregating by min"""
    id: bool
    userId: bool
    postId: bool
    value: bool
    createdAt: bool


class LikeNumberAggregateInput(TypedDict, total=False):
    """Like input for aggregating numbers"""
    value: bool


LikeAvgAggregateInput = LikeNumberAggregateInput
LikeSumAggregateInput = LikeNumberAggregateInput


LikeCountAggregateInput = TypedDict(
    'LikeCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'postId': bool,
        'value': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

LikeCountAggregateOutput = TypedDict(
    'LikeCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'postId': int,
        'value': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


LikeKeys = Literal[
    'id',
    'user',
    'userId',
    'post',
    'postId',
    'value',
    'createdAt',
]
LikeScalarFieldKeys = Literal[
    'id',
    'userId',
    'postId',
    'value',
    'createdAt',
]
LikeScalarFieldKeysT = TypeVar('LikeScalarFieldKeysT', bound=LikeScalarFieldKeys)

LikeRelationalFieldKeys = Literal[
        'user',
        'post',
    ]

# Follow types

class FollowOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Follow create method"""
    id: _str
    follower: 'UserCreateNestedWithoutRelationsInput'
    followerId: _str
    following: 'UserCreateNestedWithoutRelationsInput'
    followingId: _str
    createdAt: datetime.datetime


class FollowCreateInput(FollowOptionalCreateInput):
    """Required arguments to the Follow create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class FollowOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Follow create method, without relations"""
    id: _str
    followerId: _str
    followingId: _str
    createdAt: datetime.datetime


class FollowCreateWithoutRelationsInput(FollowOptionalCreateWithoutRelationsInput):
    """Required arguments to the Follow create method, without relations"""

class FollowConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'FollowCreateWithoutRelationsInput'
    where: 'FollowWhereUniqueInput'

class FollowCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'FollowCreateWithoutRelationsInput'
    connect: 'FollowWhereUniqueInput'
    connect_or_create: 'FollowConnectOrCreateWithoutRelationsInput'


class FollowCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['FollowCreateWithoutRelationsInput', List['FollowCreateWithoutRelationsInput']]
    connect: Union['FollowWhereUniqueInput', List['FollowWhereUniqueInput']]
    connect_or_create: Union['FollowConnectOrCreateWithoutRelationsInput', List['FollowConnectOrCreateWithoutRelationsInput']]

_FollowWhereUnique_id_Input = TypedDict(
    '_FollowWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_FollowCompoundfollowerId_followingIdKeyInner = TypedDict(
    '_FollowCompoundfollowerId_followingIdKeyInner',
    {
        'followerId': '_str',
        'followingId': '_str',
    },
    total=True
)

_FollowCompoundfollowerId_followingIdKey = TypedDict(
    '_FollowCompoundfollowerId_followingIdKey',
    {
        'followerId_followingId': '_FollowCompoundfollowerId_followingIdKeyInner',
    },
    total=True
)

FollowWhereUniqueInput = Union[
    '_FollowWhereUnique_id_Input',
    '_FollowCompoundfollowerId_followingIdKey',
]


class FollowUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    follower: 'UserUpdateOneWithoutRelationsInput'
    following: 'UserUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime


class FollowUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime


class FollowUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['FollowCreateWithoutRelationsInput']
    connect: List['FollowWhereUniqueInput']
    connect_or_create: List['FollowConnectOrCreateWithoutRelationsInput']
    set: List['FollowWhereUniqueInput']
    disconnect: List['FollowWhereUniqueInput']
    delete: List['FollowWhereUniqueInput']

    # TODO
    # update: List['FollowUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['FollowUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['FollowScalarWhereInput']
    # upsert: List['FollowUpserteWithWhereUniqueWithoutRelationsInput']


class FollowUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'FollowCreateWithoutRelationsInput'
    connect: 'FollowWhereUniqueInput'
    connect_or_create: 'FollowConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'FollowUpdateInput'
    # upsert: 'FollowUpsertWithoutRelationsInput'


class FollowUpsertInput(TypedDict):
    create: 'FollowCreateInput'
    update: 'FollowUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Follow_id_OrderByInput = TypedDict(
    '_Follow_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Follow_followerId_OrderByInput = TypedDict(
    '_Follow_followerId_OrderByInput',
    {
        'followerId': 'SortOrder',
    },
    total=True
)

_Follow_followingId_OrderByInput = TypedDict(
    '_Follow_followingId_OrderByInput',
    {
        'followingId': 'SortOrder',
    },
    total=True
)

_Follow_createdAt_OrderByInput = TypedDict(
    '_Follow_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Follow_RelevanceInner = TypedDict(
    '_Follow_RelevanceInner',
    {
        'fields': 'List[FollowScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Follow_RelevanceOrderByInput = TypedDict(
    '_Follow_RelevanceOrderByInput',
    {
        '_relevance': '_Follow_RelevanceInner',
    },
    total=True
)

FollowOrderByInput = Union[
    '_Follow_id_OrderByInput',
    '_Follow_followerId_OrderByInput',
    '_Follow_followingId_OrderByInput',
    '_Follow_createdAt_OrderByInput',
    '_Follow_RelevanceOrderByInput',
]



# recursive Follow types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

FollowRelationFilter = TypedDict(
    'FollowRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class FollowListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class FollowInclude(TypedDict, total=False):
    """Follow relational arguments"""
    follower: Union[bool, 'UserArgsFromFollow']
    following: Union[bool, 'UserArgsFromFollow']


    

class UserIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    accounts: Union[bool, 'FindManyAccountArgsFromFollowRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromFollowRecursive1']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromFollowRecursive1']
    projects: Union[bool, 'FindManyProjectArgsFromFollowRecursive1']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromFollowRecursive1']
    posts: Union[bool, 'FindManyPostArgsFromFollowRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromFollowRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromFollowRecursive1']


class UserIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    accounts: Union[bool, 'FindManyAccountArgsFromFollowRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromFollowRecursive2']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromFollowRecursive2']
    projects: Union[bool, 'FindManyProjectArgsFromFollowRecursive2']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromFollowRecursive2']
    posts: Union[bool, 'FindManyPostArgsFromFollowRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromFollowRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromFollowRecursive2']


class UserIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    accounts: Union[bool, 'FindManyAccountArgsFromFollowRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromFollowRecursive3']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromFollowRecursive3']
    projects: Union[bool, 'FindManyProjectArgsFromFollowRecursive3']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromFollowRecursive3']
    posts: Union[bool, 'FindManyPostArgsFromFollowRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromFollowRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromFollowRecursive3']


class UserIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    accounts: Union[bool, 'FindManyAccountArgsFromFollowRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromFollowRecursive4']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromFollowRecursive4']
    projects: Union[bool, 'FindManyProjectArgsFromFollowRecursive4']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromFollowRecursive4']
    posts: Union[bool, 'FindManyPostArgsFromFollowRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromFollowRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromFollowRecursive4']


class UserIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class UserArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyUserArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive1']


class AccountIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive2']


class AccountIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive3']


class AccountIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive4']


class AccountIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class AccountArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyAccountArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive1']


class SessionIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive2']


class SessionIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive3']


class SessionIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive4']


class SessionIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class SessionArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManySessionArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""


class VerificationTokenIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""


class VerificationTokenIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""


class VerificationTokenIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""


class VerificationTokenIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class VerificationTokenArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyVerificationTokenArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class PasswordResetTokenIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive1']


class PasswordResetTokenIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive2']


class PasswordResetTokenIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive3']


class PasswordResetTokenIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive4']


class PasswordResetTokenIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class PasswordResetTokenArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class PasswordResetTokenArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class PasswordResetTokenArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class PasswordResetTokenArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class PasswordResetTokenArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyPasswordResetTokenArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class FindManyPasswordResetTokenArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class FindManyPasswordResetTokenArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class FindManyPasswordResetTokenArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class FindManyPasswordResetTokenArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    
    

class ProjectIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    owner: Union[bool, 'UserArgsFromFollowRecursive1']
    files: Union[bool, 'FindManyProjectFileArgsFromFollowRecursive1']


class ProjectIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    owner: Union[bool, 'UserArgsFromFollowRecursive2']
    files: Union[bool, 'FindManyProjectFileArgsFromFollowRecursive2']


class ProjectIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    owner: Union[bool, 'UserArgsFromFollowRecursive3']
    files: Union[bool, 'FindManyProjectFileArgsFromFollowRecursive3']


class ProjectIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    owner: Union[bool, 'UserArgsFromFollowRecursive4']
    files: Union[bool, 'FindManyProjectFileArgsFromFollowRecursive4']


class ProjectIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class ProjectArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyProjectArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class ProjectFileIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    project: Union[bool, 'ProjectArgsFromFollowRecursive1']
    uploadedBy: Union[bool, 'UserArgsFromFollowRecursive1']


class ProjectFileIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    project: Union[bool, 'ProjectArgsFromFollowRecursive2']
    uploadedBy: Union[bool, 'UserArgsFromFollowRecursive2']


class ProjectFileIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    project: Union[bool, 'ProjectArgsFromFollowRecursive3']
    uploadedBy: Union[bool, 'UserArgsFromFollowRecursive3']


class ProjectFileIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    project: Union[bool, 'ProjectArgsFromFollowRecursive4']
    uploadedBy: Union[bool, 'UserArgsFromFollowRecursive4']


class ProjectFileIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class ProjectFileArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class ProjectFileArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class ProjectFileArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class ProjectFileArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class ProjectFileArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyProjectFileArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class FindManyProjectFileArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class FindManyProjectFileArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class FindManyProjectFileArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class FindManyProjectFileArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    
    

class PostIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    author: Union[bool, 'UserArgsFromFollowRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive1']


class PostIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    author: Union[bool, 'UserArgsFromFollowRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive2']


class PostIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    author: Union[bool, 'UserArgsFromFollowRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive3']


class PostIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    author: Union[bool, 'UserArgsFromFollowRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromFollowRecursive4']


class PostIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class PostArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyPostArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class LikeIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive1']
    post: Union[bool, 'PostArgsFromFollowRecursive1']


class LikeIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive2']
    post: Union[bool, 'PostArgsFromFollowRecursive2']


class LikeIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive3']
    post: Union[bool, 'PostArgsFromFollowRecursive3']


class LikeIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    user: Union[bool, 'UserArgsFromFollowRecursive4']
    post: Union[bool, 'PostArgsFromFollowRecursive4']


class LikeIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class LikeArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyLikeArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class FollowIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""
    follower: Union[bool, 'UserArgsFromFollowRecursive1']
    following: Union[bool, 'UserArgsFromFollowRecursive1']


class FollowIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""
    follower: Union[bool, 'UserArgsFromFollowRecursive2']
    following: Union[bool, 'UserArgsFromFollowRecursive2']


class FollowIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""
    follower: Union[bool, 'UserArgsFromFollowRecursive3']
    following: Union[bool, 'UserArgsFromFollowRecursive3']


class FollowIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""
    follower: Union[bool, 'UserArgsFromFollowRecursive4']
    following: Union[bool, 'UserArgsFromFollowRecursive4']


class FollowIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class FollowArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManyFollowArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    
    

class SecurityAuditLogIncludeFromFollow(TypedDict, total=False):
    """Relational arguments for Follow"""


class SecurityAuditLogIncludeFromFollowRecursive1(TypedDict, total=False):
    """Relational arguments for Follow"""


class SecurityAuditLogIncludeFromFollowRecursive2(TypedDict, total=False):
    """Relational arguments for Follow"""


class SecurityAuditLogIncludeFromFollowRecursive3(TypedDict, total=False):
    """Relational arguments for Follow"""


class SecurityAuditLogIncludeFromFollowRecursive4(TypedDict, total=False):
    """Relational arguments for Follow"""

    

class SecurityAuditLogArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class SecurityAuditLogArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class SecurityAuditLogArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class SecurityAuditLogArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class SecurityAuditLogArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    
    

class FindManySecurityAuditLogArgsFromFollow(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class FindManySecurityAuditLogArgsFromFollowRecursive1(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class FindManySecurityAuditLogArgsFromFollowRecursive2(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class FindManySecurityAuditLogArgsFromFollowRecursive3(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class FindManySecurityAuditLogArgsFromFollowRecursive4(TypedDict, total=False):
    """Arguments for Follow"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    


FindManyFollowArgs = FindManyFollowArgsFromFollow
FindFirstFollowArgs = FindManyFollowArgsFromFollow


    

class FollowWhereInput(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    follower: 'UserRelationFilter'
    followerId: Union[_str, 'types.StringFilter']
    following: 'UserRelationFilter'
    followingId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FollowWhereInputRecursive1', List['FollowWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['FollowWhereInputRecursive1']
    OR: List['FollowWhereInputRecursive1']
    NOT: List['FollowWhereInputRecursive1']


class FollowWhereInputRecursive1(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    follower: 'UserRelationFilter'
    followerId: Union[_str, 'types.StringFilter']
    following: 'UserRelationFilter'
    followingId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FollowWhereInputRecursive2', List['FollowWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['FollowWhereInputRecursive2']
    OR: List['FollowWhereInputRecursive2']
    NOT: List['FollowWhereInputRecursive2']


class FollowWhereInputRecursive2(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    follower: 'UserRelationFilter'
    followerId: Union[_str, 'types.StringFilter']
    following: 'UserRelationFilter'
    followingId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FollowWhereInputRecursive3', List['FollowWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['FollowWhereInputRecursive3']
    OR: List['FollowWhereInputRecursive3']
    NOT: List['FollowWhereInputRecursive3']


class FollowWhereInputRecursive3(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    follower: 'UserRelationFilter'
    followerId: Union[_str, 'types.StringFilter']
    following: 'UserRelationFilter'
    followingId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['FollowWhereInputRecursive4', List['FollowWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['FollowWhereInputRecursive4']
    OR: List['FollowWhereInputRecursive4']
    NOT: List['FollowWhereInputRecursive4']


class FollowWhereInputRecursive4(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    follower: 'UserRelationFilter'
    followerId: Union[_str, 'types.StringFilter']
    following: 'UserRelationFilter'
    followingId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Follow types


    

class FollowScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    followerId: Union[_str, 'types.StringWithAggregatesFilter']
    followingId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FollowScalarWhereWithAggregatesInputRecursive1']
    OR: List['FollowScalarWhereWithAggregatesInputRecursive1']
    NOT: List['FollowScalarWhereWithAggregatesInputRecursive1']


class FollowScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    followerId: Union[_str, 'types.StringWithAggregatesFilter']
    followingId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FollowScalarWhereWithAggregatesInputRecursive2']
    OR: List['FollowScalarWhereWithAggregatesInputRecursive2']
    NOT: List['FollowScalarWhereWithAggregatesInputRecursive2']


class FollowScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    followerId: Union[_str, 'types.StringWithAggregatesFilter']
    followingId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FollowScalarWhereWithAggregatesInputRecursive3']
    OR: List['FollowScalarWhereWithAggregatesInputRecursive3']
    NOT: List['FollowScalarWhereWithAggregatesInputRecursive3']


class FollowScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    followerId: Union[_str, 'types.StringWithAggregatesFilter']
    followingId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['FollowScalarWhereWithAggregatesInputRecursive4']
    OR: List['FollowScalarWhereWithAggregatesInputRecursive4']
    NOT: List['FollowScalarWhereWithAggregatesInputRecursive4']


class FollowScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Follow arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    followerId: Union[_str, 'types.StringWithAggregatesFilter']
    followingId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class FollowGroupByOutput(TypedDict, total=False):
    id: _str
    followerId: _str
    followingId: _str
    createdAt: datetime.datetime
    _sum: 'FollowSumAggregateOutput'
    _avg: 'FollowAvgAggregateOutput'
    _min: 'FollowMinAggregateOutput'
    _max: 'FollowMaxAggregateOutput'
    _count: 'FollowCountAggregateOutput'


class FollowAvgAggregateOutput(TypedDict, total=False):
    """Follow output for aggregating averages"""


class FollowSumAggregateOutput(TypedDict, total=False):
    """Follow output for aggregating sums"""


class FollowScalarAggregateOutput(TypedDict, total=False):
    """Follow output including scalar fields"""
    id: _str
    followerId: _str
    followingId: _str
    createdAt: datetime.datetime


FollowMinAggregateOutput = FollowScalarAggregateOutput
FollowMaxAggregateOutput = FollowScalarAggregateOutput


class FollowMaxAggregateInput(TypedDict, total=False):
    """Follow input for aggregating by max"""
    id: bool
    followerId: bool
    followingId: bool
    createdAt: bool


class FollowMinAggregateInput(TypedDict, total=False):
    """Follow input for aggregating by min"""
    id: bool
    followerId: bool
    followingId: bool
    createdAt: bool


class FollowNumberAggregateInput(TypedDict, total=False):
    """Follow input for aggregating numbers"""


FollowAvgAggregateInput = FollowNumberAggregateInput
FollowSumAggregateInput = FollowNumberAggregateInput


FollowCountAggregateInput = TypedDict(
    'FollowCountAggregateInput',
    {
        'id': bool,
        'followerId': bool,
        'followingId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

FollowCountAggregateOutput = TypedDict(
    'FollowCountAggregateOutput',
    {
        'id': int,
        'followerId': int,
        'followingId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


FollowKeys = Literal[
    'id',
    'follower',
    'followerId',
    'following',
    'followingId',
    'createdAt',
]
FollowScalarFieldKeys = Literal[
    'id',
    'followerId',
    'followingId',
    'createdAt',
]
FollowScalarFieldKeysT = TypeVar('FollowScalarFieldKeysT', bound=FollowScalarFieldKeys)

FollowRelationalFieldKeys = Literal[
        'follower',
        'following',
    ]

# SecurityAuditLog types

class SecurityAuditLogOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the SecurityAuditLog create method"""
    id: _str
    userId: Optional[_str]
    details: Optional[_str]
    ipAddress: Optional[_str]
    userAgent: Optional[_str]
    timestamp: datetime.datetime


class SecurityAuditLogCreateInput(SecurityAuditLogOptionalCreateInput):
    """Required arguments to the SecurityAuditLog create method"""
    event: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SecurityAuditLogOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the SecurityAuditLog create method, without relations"""
    id: _str
    userId: Optional[_str]
    details: Optional[_str]
    ipAddress: Optional[_str]
    userAgent: Optional[_str]
    timestamp: datetime.datetime


class SecurityAuditLogCreateWithoutRelationsInput(SecurityAuditLogOptionalCreateWithoutRelationsInput):
    """Required arguments to the SecurityAuditLog create method, without relations"""
    event: _str

class SecurityAuditLogConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SecurityAuditLogCreateWithoutRelationsInput'
    where: 'SecurityAuditLogWhereUniqueInput'

class SecurityAuditLogCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SecurityAuditLogCreateWithoutRelationsInput'
    connect: 'SecurityAuditLogWhereUniqueInput'
    connect_or_create: 'SecurityAuditLogConnectOrCreateWithoutRelationsInput'


class SecurityAuditLogCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SecurityAuditLogCreateWithoutRelationsInput', List['SecurityAuditLogCreateWithoutRelationsInput']]
    connect: Union['SecurityAuditLogWhereUniqueInput', List['SecurityAuditLogWhereUniqueInput']]
    connect_or_create: Union['SecurityAuditLogConnectOrCreateWithoutRelationsInput', List['SecurityAuditLogConnectOrCreateWithoutRelationsInput']]

_SecurityAuditLogWhereUnique_id_Input = TypedDict(
    '_SecurityAuditLogWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

SecurityAuditLogWhereUniqueInput = _SecurityAuditLogWhereUnique_id_Input


class SecurityAuditLogUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    event: _str
    userId: Optional[_str]
    details: Optional[_str]
    ipAddress: Optional[_str]
    userAgent: Optional[_str]
    timestamp: datetime.datetime


class SecurityAuditLogUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    event: _str
    userId: Optional[_str]
    details: Optional[_str]
    ipAddress: Optional[_str]
    userAgent: Optional[_str]
    timestamp: datetime.datetime


class SecurityAuditLogUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SecurityAuditLogCreateWithoutRelationsInput']
    connect: List['SecurityAuditLogWhereUniqueInput']
    connect_or_create: List['SecurityAuditLogConnectOrCreateWithoutRelationsInput']
    set: List['SecurityAuditLogWhereUniqueInput']
    disconnect: List['SecurityAuditLogWhereUniqueInput']
    delete: List['SecurityAuditLogWhereUniqueInput']

    # TODO
    # update: List['SecurityAuditLogUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SecurityAuditLogUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SecurityAuditLogScalarWhereInput']
    # upsert: List['SecurityAuditLogUpserteWithWhereUniqueWithoutRelationsInput']


class SecurityAuditLogUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SecurityAuditLogCreateWithoutRelationsInput'
    connect: 'SecurityAuditLogWhereUniqueInput'
    connect_or_create: 'SecurityAuditLogConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SecurityAuditLogUpdateInput'
    # upsert: 'SecurityAuditLogUpsertWithoutRelationsInput'


class SecurityAuditLogUpsertInput(TypedDict):
    create: 'SecurityAuditLogCreateInput'
    update: 'SecurityAuditLogUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_SecurityAuditLog_id_OrderByInput = TypedDict(
    '_SecurityAuditLog_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_SecurityAuditLog_event_OrderByInput = TypedDict(
    '_SecurityAuditLog_event_OrderByInput',
    {
        'event': 'SortOrder',
    },
    total=True
)

_SecurityAuditLog_userId_OrderByInput = TypedDict(
    '_SecurityAuditLog_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_SecurityAuditLog_details_OrderByInput = TypedDict(
    '_SecurityAuditLog_details_OrderByInput',
    {
        'details': 'SortOrder',
    },
    total=True
)

_SecurityAuditLog_ipAddress_OrderByInput = TypedDict(
    '_SecurityAuditLog_ipAddress_OrderByInput',
    {
        'ipAddress': 'SortOrder',
    },
    total=True
)

_SecurityAuditLog_userAgent_OrderByInput = TypedDict(
    '_SecurityAuditLog_userAgent_OrderByInput',
    {
        'userAgent': 'SortOrder',
    },
    total=True
)

_SecurityAuditLog_timestamp_OrderByInput = TypedDict(
    '_SecurityAuditLog_timestamp_OrderByInput',
    {
        'timestamp': 'SortOrder',
    },
    total=True
)

_SecurityAuditLog_RelevanceInner = TypedDict(
    '_SecurityAuditLog_RelevanceInner',
    {
        'fields': 'List[SecurityAuditLogScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_SecurityAuditLog_RelevanceOrderByInput = TypedDict(
    '_SecurityAuditLog_RelevanceOrderByInput',
    {
        '_relevance': '_SecurityAuditLog_RelevanceInner',
    },
    total=True
)

SecurityAuditLogOrderByInput = Union[
    '_SecurityAuditLog_id_OrderByInput',
    '_SecurityAuditLog_event_OrderByInput',
    '_SecurityAuditLog_userId_OrderByInput',
    '_SecurityAuditLog_details_OrderByInput',
    '_SecurityAuditLog_ipAddress_OrderByInput',
    '_SecurityAuditLog_userAgent_OrderByInput',
    '_SecurityAuditLog_timestamp_OrderByInput',
    '_SecurityAuditLog_RelevanceOrderByInput',
]



# recursive SecurityAuditLog types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SecurityAuditLogRelationFilter = TypedDict(
    'SecurityAuditLogRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SecurityAuditLogListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SecurityAuditLogInclude(TypedDict, total=False):
    """SecurityAuditLog relational arguments"""


    

class UserIncludeFromSecurityAuditLog(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    accounts: Union[bool, 'FindManyAccountArgsFromSecurityAuditLogRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromSecurityAuditLogRecursive1']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromSecurityAuditLogRecursive1']
    projects: Union[bool, 'FindManyProjectArgsFromSecurityAuditLogRecursive1']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromSecurityAuditLogRecursive1']
    posts: Union[bool, 'FindManyPostArgsFromSecurityAuditLogRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromSecurityAuditLogRecursive1']
    following: Union[bool, 'FindManyFollowArgsFromSecurityAuditLogRecursive1']
    followers: Union[bool, 'FindManyFollowArgsFromSecurityAuditLogRecursive1']


class UserIncludeFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    accounts: Union[bool, 'FindManyAccountArgsFromSecurityAuditLogRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromSecurityAuditLogRecursive2']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromSecurityAuditLogRecursive2']
    projects: Union[bool, 'FindManyProjectArgsFromSecurityAuditLogRecursive2']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromSecurityAuditLogRecursive2']
    posts: Union[bool, 'FindManyPostArgsFromSecurityAuditLogRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromSecurityAuditLogRecursive2']
    following: Union[bool, 'FindManyFollowArgsFromSecurityAuditLogRecursive2']
    followers: Union[bool, 'FindManyFollowArgsFromSecurityAuditLogRecursive2']


class UserIncludeFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    accounts: Union[bool, 'FindManyAccountArgsFromSecurityAuditLogRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromSecurityAuditLogRecursive3']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromSecurityAuditLogRecursive3']
    projects: Union[bool, 'FindManyProjectArgsFromSecurityAuditLogRecursive3']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromSecurityAuditLogRecursive3']
    posts: Union[bool, 'FindManyPostArgsFromSecurityAuditLogRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromSecurityAuditLogRecursive3']
    following: Union[bool, 'FindManyFollowArgsFromSecurityAuditLogRecursive3']
    followers: Union[bool, 'FindManyFollowArgsFromSecurityAuditLogRecursive3']


class UserIncludeFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    accounts: Union[bool, 'FindManyAccountArgsFromSecurityAuditLogRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromSecurityAuditLogRecursive4']
    passwordResetTokens: Union[bool, 'FindManyPasswordResetTokenArgsFromSecurityAuditLogRecursive4']
    projects: Union[bool, 'FindManyProjectArgsFromSecurityAuditLogRecursive4']
    uploadedFiles: Union[bool, 'FindManyProjectFileArgsFromSecurityAuditLogRecursive4']
    posts: Union[bool, 'FindManyPostArgsFromSecurityAuditLogRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromSecurityAuditLogRecursive4']
    following: Union[bool, 'FindManyFollowArgsFromSecurityAuditLogRecursive4']
    followers: Union[bool, 'FindManyFollowArgsFromSecurityAuditLogRecursive4']


class UserIncludeFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""

    

class UserArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    
    

class FindManyUserArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class AccountIncludeFromSecurityAuditLog(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive1']


class AccountIncludeFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive2']


class AccountIncludeFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive3']


class AccountIncludeFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive4']


class AccountIncludeFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""

    

class AccountArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'AccountIncludeFromAccountRecursive1'


class AccountArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'AccountIncludeFromAccountRecursive2'


class AccountArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'AccountIncludeFromAccountRecursive3'


class AccountArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'AccountIncludeFromAccountRecursive4'


class AccountArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    
    

class FindManyAccountArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive1'


class FindManyAccountArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive2'


class FindManyAccountArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive3'


class FindManyAccountArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    include: 'AccountIncludeFromAccountRecursive4'


class FindManyAccountArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['AccountOrderByInput', List['AccountOrderByInput']]
    where: 'AccountWhereInput'
    cursor: 'AccountWhereUniqueInput'
    distinct: List['AccountScalarFieldKeys']
    
    

class SessionIncludeFromSecurityAuditLog(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive1']


class SessionIncludeFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive2']


class SessionIncludeFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive3']


class SessionIncludeFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive4']


class SessionIncludeFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""

    

class SessionArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    
    

class FindManySessionArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class VerificationTokenIncludeFromSecurityAuditLog(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""


class VerificationTokenIncludeFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""


class VerificationTokenIncludeFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""


class VerificationTokenIncludeFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""


class VerificationTokenIncludeFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""

    

class VerificationTokenArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class VerificationTokenArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class VerificationTokenArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class VerificationTokenArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class VerificationTokenArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    
    

class FindManyVerificationTokenArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive1'


class FindManyVerificationTokenArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive2'


class FindManyVerificationTokenArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive3'


class FindManyVerificationTokenArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    include: 'VerificationTokenIncludeFromVerificationTokenRecursive4'


class FindManyVerificationTokenArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['VerificationTokenOrderByInput', List['VerificationTokenOrderByInput']]
    where: 'VerificationTokenWhereInput'
    cursor: 'VerificationTokenWhereUniqueInput'
    distinct: List['VerificationTokenScalarFieldKeys']
    
    

class PasswordResetTokenIncludeFromSecurityAuditLog(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive1']


class PasswordResetTokenIncludeFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive2']


class PasswordResetTokenIncludeFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive3']


class PasswordResetTokenIncludeFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive4']


class PasswordResetTokenIncludeFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""

    

class PasswordResetTokenArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class PasswordResetTokenArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class PasswordResetTokenArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class PasswordResetTokenArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class PasswordResetTokenArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    
    

class FindManyPasswordResetTokenArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive1'


class FindManyPasswordResetTokenArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive2'


class FindManyPasswordResetTokenArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive3'


class FindManyPasswordResetTokenArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    include: 'PasswordResetTokenIncludeFromPasswordResetTokenRecursive4'


class FindManyPasswordResetTokenArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['PasswordResetTokenOrderByInput', List['PasswordResetTokenOrderByInput']]
    where: 'PasswordResetTokenWhereInput'
    cursor: 'PasswordResetTokenWhereUniqueInput'
    distinct: List['PasswordResetTokenScalarFieldKeys']
    
    

class ProjectIncludeFromSecurityAuditLog(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    owner: Union[bool, 'UserArgsFromSecurityAuditLogRecursive1']
    files: Union[bool, 'FindManyProjectFileArgsFromSecurityAuditLogRecursive1']


class ProjectIncludeFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    owner: Union[bool, 'UserArgsFromSecurityAuditLogRecursive2']
    files: Union[bool, 'FindManyProjectFileArgsFromSecurityAuditLogRecursive2']


class ProjectIncludeFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    owner: Union[bool, 'UserArgsFromSecurityAuditLogRecursive3']
    files: Union[bool, 'FindManyProjectFileArgsFromSecurityAuditLogRecursive3']


class ProjectIncludeFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    owner: Union[bool, 'UserArgsFromSecurityAuditLogRecursive4']
    files: Union[bool, 'FindManyProjectFileArgsFromSecurityAuditLogRecursive4']


class ProjectIncludeFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""

    

class ProjectArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'ProjectIncludeFromProjectRecursive1'


class ProjectArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'ProjectIncludeFromProjectRecursive2'


class ProjectArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'ProjectIncludeFromProjectRecursive3'


class ProjectArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'ProjectIncludeFromProjectRecursive4'


class ProjectArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    
    

class FindManyProjectArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive1'


class FindManyProjectArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive2'


class FindManyProjectArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive3'


class FindManyProjectArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    include: 'ProjectIncludeFromProjectRecursive4'


class FindManyProjectArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['ProjectOrderByInput', List['ProjectOrderByInput']]
    where: 'ProjectWhereInput'
    cursor: 'ProjectWhereUniqueInput'
    distinct: List['ProjectScalarFieldKeys']
    
    

class ProjectFileIncludeFromSecurityAuditLog(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    project: Union[bool, 'ProjectArgsFromSecurityAuditLogRecursive1']
    uploadedBy: Union[bool, 'UserArgsFromSecurityAuditLogRecursive1']


class ProjectFileIncludeFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    project: Union[bool, 'ProjectArgsFromSecurityAuditLogRecursive2']
    uploadedBy: Union[bool, 'UserArgsFromSecurityAuditLogRecursive2']


class ProjectFileIncludeFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    project: Union[bool, 'ProjectArgsFromSecurityAuditLogRecursive3']
    uploadedBy: Union[bool, 'UserArgsFromSecurityAuditLogRecursive3']


class ProjectFileIncludeFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    project: Union[bool, 'ProjectArgsFromSecurityAuditLogRecursive4']
    uploadedBy: Union[bool, 'UserArgsFromSecurityAuditLogRecursive4']


class ProjectFileIncludeFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""

    

class ProjectFileArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class ProjectFileArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class ProjectFileArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class ProjectFileArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class ProjectFileArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    
    

class FindManyProjectFileArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive1'


class FindManyProjectFileArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive2'


class FindManyProjectFileArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive3'


class FindManyProjectFileArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    include: 'ProjectFileIncludeFromProjectFileRecursive4'


class FindManyProjectFileArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['ProjectFileOrderByInput', List['ProjectFileOrderByInput']]
    where: 'ProjectFileWhereInput'
    cursor: 'ProjectFileWhereUniqueInput'
    distinct: List['ProjectFileScalarFieldKeys']
    
    

class PostIncludeFromSecurityAuditLog(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    author: Union[bool, 'UserArgsFromSecurityAuditLogRecursive1']
    likes: Union[bool, 'FindManyLikeArgsFromSecurityAuditLogRecursive1']


class PostIncludeFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    author: Union[bool, 'UserArgsFromSecurityAuditLogRecursive2']
    likes: Union[bool, 'FindManyLikeArgsFromSecurityAuditLogRecursive2']


class PostIncludeFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    author: Union[bool, 'UserArgsFromSecurityAuditLogRecursive3']
    likes: Union[bool, 'FindManyLikeArgsFromSecurityAuditLogRecursive3']


class PostIncludeFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    author: Union[bool, 'UserArgsFromSecurityAuditLogRecursive4']
    likes: Union[bool, 'FindManyLikeArgsFromSecurityAuditLogRecursive4']


class PostIncludeFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""

    

class PostArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    
    

class FindManyPostArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    distinct: List['PostScalarFieldKeys']
    
    

class LikeIncludeFromSecurityAuditLog(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive1']
    post: Union[bool, 'PostArgsFromSecurityAuditLogRecursive1']


class LikeIncludeFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive2']
    post: Union[bool, 'PostArgsFromSecurityAuditLogRecursive2']


class LikeIncludeFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive3']
    post: Union[bool, 'PostArgsFromSecurityAuditLogRecursive3']


class LikeIncludeFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    user: Union[bool, 'UserArgsFromSecurityAuditLogRecursive4']
    post: Union[bool, 'PostArgsFromSecurityAuditLogRecursive4']


class LikeIncludeFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""

    

class LikeArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'LikeIncludeFromLikeRecursive1'


class LikeArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'LikeIncludeFromLikeRecursive2'


class LikeArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'LikeIncludeFromLikeRecursive3'


class LikeArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'LikeIncludeFromLikeRecursive4'


class LikeArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    
    

class FindManyLikeArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive1'


class FindManyLikeArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive2'


class FindManyLikeArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive3'


class FindManyLikeArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    include: 'LikeIncludeFromLikeRecursive4'


class FindManyLikeArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['LikeOrderByInput', List['LikeOrderByInput']]
    where: 'LikeWhereInput'
    cursor: 'LikeWhereUniqueInput'
    distinct: List['LikeScalarFieldKeys']
    
    

class FollowIncludeFromSecurityAuditLog(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    follower: Union[bool, 'UserArgsFromSecurityAuditLogRecursive1']
    following: Union[bool, 'UserArgsFromSecurityAuditLogRecursive1']


class FollowIncludeFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    follower: Union[bool, 'UserArgsFromSecurityAuditLogRecursive2']
    following: Union[bool, 'UserArgsFromSecurityAuditLogRecursive2']


class FollowIncludeFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    follower: Union[bool, 'UserArgsFromSecurityAuditLogRecursive3']
    following: Union[bool, 'UserArgsFromSecurityAuditLogRecursive3']


class FollowIncludeFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""
    follower: Union[bool, 'UserArgsFromSecurityAuditLogRecursive4']
    following: Union[bool, 'UserArgsFromSecurityAuditLogRecursive4']


class FollowIncludeFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""

    

class FollowArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'FollowIncludeFromFollowRecursive1'


class FollowArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'FollowIncludeFromFollowRecursive2'


class FollowArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'FollowIncludeFromFollowRecursive3'


class FollowArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'FollowIncludeFromFollowRecursive4'


class FollowArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    
    

class FindManyFollowArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive1'


class FindManyFollowArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive2'


class FindManyFollowArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive3'


class FindManyFollowArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    include: 'FollowIncludeFromFollowRecursive4'


class FindManyFollowArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['FollowOrderByInput', List['FollowOrderByInput']]
    where: 'FollowWhereInput'
    cursor: 'FollowWhereUniqueInput'
    distinct: List['FollowScalarFieldKeys']
    
    

class SecurityAuditLogIncludeFromSecurityAuditLog(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""


class SecurityAuditLogIncludeFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""


class SecurityAuditLogIncludeFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""


class SecurityAuditLogIncludeFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""


class SecurityAuditLogIncludeFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Relational arguments for SecurityAuditLog"""

    

class SecurityAuditLogArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class SecurityAuditLogArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class SecurityAuditLogArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class SecurityAuditLogArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class SecurityAuditLogArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    
    

class FindManySecurityAuditLogArgsFromSecurityAuditLog(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive1'


class FindManySecurityAuditLogArgsFromSecurityAuditLogRecursive1(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive2'


class FindManySecurityAuditLogArgsFromSecurityAuditLogRecursive2(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive3'


class FindManySecurityAuditLogArgsFromSecurityAuditLogRecursive3(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    include: 'SecurityAuditLogIncludeFromSecurityAuditLogRecursive4'


class FindManySecurityAuditLogArgsFromSecurityAuditLogRecursive4(TypedDict, total=False):
    """Arguments for SecurityAuditLog"""
    take: int
    skip: int
    order_by: Union['SecurityAuditLogOrderByInput', List['SecurityAuditLogOrderByInput']]
    where: 'SecurityAuditLogWhereInput'
    cursor: 'SecurityAuditLogWhereUniqueInput'
    distinct: List['SecurityAuditLogScalarFieldKeys']
    


FindManySecurityAuditLogArgs = FindManySecurityAuditLogArgsFromSecurityAuditLog
FindFirstSecurityAuditLogArgs = FindManySecurityAuditLogArgsFromSecurityAuditLog


    

class SecurityAuditLogWhereInput(TypedDict, total=False):
    """SecurityAuditLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    event: Union[_str, 'types.StringFilter']
    userId: Union[None, _str, 'types.StringFilter']
    details: Union[None, _str, 'types.StringFilter']
    ipAddress: Union[None, _str, 'types.StringFilter']
    userAgent: Union[None, _str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SecurityAuditLogWhereInputRecursive1', List['SecurityAuditLogWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SecurityAuditLogWhereInputRecursive1']
    OR: List['SecurityAuditLogWhereInputRecursive1']
    NOT: List['SecurityAuditLogWhereInputRecursive1']


class SecurityAuditLogWhereInputRecursive1(TypedDict, total=False):
    """SecurityAuditLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    event: Union[_str, 'types.StringFilter']
    userId: Union[None, _str, 'types.StringFilter']
    details: Union[None, _str, 'types.StringFilter']
    ipAddress: Union[None, _str, 'types.StringFilter']
    userAgent: Union[None, _str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SecurityAuditLogWhereInputRecursive2', List['SecurityAuditLogWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SecurityAuditLogWhereInputRecursive2']
    OR: List['SecurityAuditLogWhereInputRecursive2']
    NOT: List['SecurityAuditLogWhereInputRecursive2']


class SecurityAuditLogWhereInputRecursive2(TypedDict, total=False):
    """SecurityAuditLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    event: Union[_str, 'types.StringFilter']
    userId: Union[None, _str, 'types.StringFilter']
    details: Union[None, _str, 'types.StringFilter']
    ipAddress: Union[None, _str, 'types.StringFilter']
    userAgent: Union[None, _str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SecurityAuditLogWhereInputRecursive3', List['SecurityAuditLogWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SecurityAuditLogWhereInputRecursive3']
    OR: List['SecurityAuditLogWhereInputRecursive3']
    NOT: List['SecurityAuditLogWhereInputRecursive3']


class SecurityAuditLogWhereInputRecursive3(TypedDict, total=False):
    """SecurityAuditLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    event: Union[_str, 'types.StringFilter']
    userId: Union[None, _str, 'types.StringFilter']
    details: Union[None, _str, 'types.StringFilter']
    ipAddress: Union[None, _str, 'types.StringFilter']
    userAgent: Union[None, _str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['SecurityAuditLogWhereInputRecursive4', List['SecurityAuditLogWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SecurityAuditLogWhereInputRecursive4']
    OR: List['SecurityAuditLogWhereInputRecursive4']
    NOT: List['SecurityAuditLogWhereInputRecursive4']


class SecurityAuditLogWhereInputRecursive4(TypedDict, total=False):
    """SecurityAuditLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    event: Union[_str, 'types.StringFilter']
    userId: Union[None, _str, 'types.StringFilter']
    details: Union[None, _str, 'types.StringFilter']
    ipAddress: Union[None, _str, 'types.StringFilter']
    userAgent: Union[None, _str, 'types.StringFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate SecurityAuditLog types


    

class SecurityAuditLogScalarWhereWithAggregatesInput(TypedDict, total=False):
    """SecurityAuditLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    event: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']
    ipAddress: Union[_str, 'types.StringWithAggregatesFilter']
    userAgent: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SecurityAuditLogScalarWhereWithAggregatesInputRecursive1']
    OR: List['SecurityAuditLogScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SecurityAuditLogScalarWhereWithAggregatesInputRecursive1']


class SecurityAuditLogScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """SecurityAuditLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    event: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']
    ipAddress: Union[_str, 'types.StringWithAggregatesFilter']
    userAgent: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SecurityAuditLogScalarWhereWithAggregatesInputRecursive2']
    OR: List['SecurityAuditLogScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SecurityAuditLogScalarWhereWithAggregatesInputRecursive2']


class SecurityAuditLogScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """SecurityAuditLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    event: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']
    ipAddress: Union[_str, 'types.StringWithAggregatesFilter']
    userAgent: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SecurityAuditLogScalarWhereWithAggregatesInputRecursive3']
    OR: List['SecurityAuditLogScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SecurityAuditLogScalarWhereWithAggregatesInputRecursive3']


class SecurityAuditLogScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """SecurityAuditLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    event: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']
    ipAddress: Union[_str, 'types.StringWithAggregatesFilter']
    userAgent: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SecurityAuditLogScalarWhereWithAggregatesInputRecursive4']
    OR: List['SecurityAuditLogScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SecurityAuditLogScalarWhereWithAggregatesInputRecursive4']


class SecurityAuditLogScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """SecurityAuditLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    event: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    details: Union[_str, 'types.StringWithAggregatesFilter']
    ipAddress: Union[_str, 'types.StringWithAggregatesFilter']
    userAgent: Union[_str, 'types.StringWithAggregatesFilter']
    timestamp: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SecurityAuditLogGroupByOutput(TypedDict, total=False):
    id: _str
    event: _str
    userId: _str
    details: _str
    ipAddress: _str
    userAgent: _str
    timestamp: datetime.datetime
    _sum: 'SecurityAuditLogSumAggregateOutput'
    _avg: 'SecurityAuditLogAvgAggregateOutput'
    _min: 'SecurityAuditLogMinAggregateOutput'
    _max: 'SecurityAuditLogMaxAggregateOutput'
    _count: 'SecurityAuditLogCountAggregateOutput'


class SecurityAuditLogAvgAggregateOutput(TypedDict, total=False):
    """SecurityAuditLog output for aggregating averages"""


class SecurityAuditLogSumAggregateOutput(TypedDict, total=False):
    """SecurityAuditLog output for aggregating sums"""


class SecurityAuditLogScalarAggregateOutput(TypedDict, total=False):
    """SecurityAuditLog output including scalar fields"""
    id: _str
    event: _str
    userId: _str
    details: _str
    ipAddress: _str
    userAgent: _str
    timestamp: datetime.datetime


SecurityAuditLogMinAggregateOutput = SecurityAuditLogScalarAggregateOutput
SecurityAuditLogMaxAggregateOutput = SecurityAuditLogScalarAggregateOutput


class SecurityAuditLogMaxAggregateInput(TypedDict, total=False):
    """SecurityAuditLog input for aggregating by max"""
    id: bool
    event: bool
    userId: bool
    details: bool
    ipAddress: bool
    userAgent: bool
    timestamp: bool


class SecurityAuditLogMinAggregateInput(TypedDict, total=False):
    """SecurityAuditLog input for aggregating by min"""
    id: bool
    event: bool
    userId: bool
    details: bool
    ipAddress: bool
    userAgent: bool
    timestamp: bool


class SecurityAuditLogNumberAggregateInput(TypedDict, total=False):
    """SecurityAuditLog input for aggregating numbers"""


SecurityAuditLogAvgAggregateInput = SecurityAuditLogNumberAggregateInput
SecurityAuditLogSumAggregateInput = SecurityAuditLogNumberAggregateInput


SecurityAuditLogCountAggregateInput = TypedDict(
    'SecurityAuditLogCountAggregateInput',
    {
        'id': bool,
        'event': bool,
        'userId': bool,
        'details': bool,
        'ipAddress': bool,
        'userAgent': bool,
        'timestamp': bool,
        '_all': bool,
    },
    total=False,
)

SecurityAuditLogCountAggregateOutput = TypedDict(
    'SecurityAuditLogCountAggregateOutput',
    {
        'id': int,
        'event': int,
        'userId': int,
        'details': int,
        'ipAddress': int,
        'userAgent': int,
        'timestamp': int,
        '_all': int,
    },
    total=False,
)


SecurityAuditLogKeys = Literal[
    'id',
    'event',
    'userId',
    'details',
    'ipAddress',
    'userAgent',
    'timestamp',
]
SecurityAuditLogScalarFieldKeys = Literal[
    'id',
    'event',
    'userId',
    'details',
    'ipAddress',
    'userAgent',
    'timestamp',
]
SecurityAuditLogScalarFieldKeysT = TypeVar('SecurityAuditLogScalarFieldKeysT', bound=SecurityAuditLogScalarFieldKeys)

SecurityAuditLogRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields