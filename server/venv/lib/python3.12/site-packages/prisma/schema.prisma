// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator pyclient {
  provider = "/home/ankit/Documents/Code/blaze-neuro-mobile/server/venv/bin/python /home/ankit/Documents/Code/blaze-neuro-mobile/server/venv/bin/prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

model User {
  id                  String               @id @default(cuid())
  name                String?
  email               String?              @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                UserRole             @default(USER)
  resetToken          String?              @unique
  resetTokenExpiry    DateTime?
  lastLogin           DateTime?
  accounts            Account[]
  sessions            Session[]
  passwordResetTokens PasswordResetToken[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  coin                Int                  @default(0)
  projects            Project[]
  uploadedFiles       ProjectFile[]
  posts               Post[]
  likes               Like[]
  following           Follow[]             @relation("Follower")
  followers           Follow[]             @relation("Following")

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([token])
}

model Project {
  id          String        @id @default(uuid())
  name        String
  description String?
  isFree      Boolean       @default(true)
  coinCost    Int?
  owner       User          @relation(fields: [ownerId], references: [id])
  ownerId     String
  files       ProjectFile[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProjectFile {
  id           String   @id @default(uuid())
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  fileName     String
  appwriteId   String   @unique // Appwrite file ID
  fileSize     Int // Size in bytes
  mimeType     String // File type
  fileUrl      String? // Appwrite file URL
  isPublic     Boolean  @default(false)
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([appwriteId])
  @@index([uploadedById])
}

model Post {
  id          String   @id @default(uuid())
  title       String
  description String?
  markdown    String
  tags        String[]
  feature     Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  likes       Like[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  value     Int // 1 for like, -1 for dislike
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model SecurityAuditLog {
  id        String   @id @default(uuid())
  event     String // Type of security event
  userId    String? // User ID if applicable
  details   String? // JSON string with additional details
  ipAddress String? // IP address of the request
  userAgent String? // User agent string
  timestamp DateTime @default(now())

  @@index([event])
  @@index([userId])
  @@index([timestamp])
  @@index([ipAddress])
}
